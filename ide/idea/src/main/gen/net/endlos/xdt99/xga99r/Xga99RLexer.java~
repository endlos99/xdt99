/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package net.endlos.xdt99.xga99r;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import net.endlos.xdt99.xga99r.psi.Xga99RTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Xga99R.flex</tt>
 */
class Xga99RLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MNEMONIC = 2;
  public static final int FMNEMONIC = 4;
  public static final int MNEMONICO = 6;
  public static final int ARGUMENTS = 8;
  public static final int PREPROC = 10;
  public static final int TLIT = 12;
  public static final int FLIT = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\77\1\1\3\275\1");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\61\1\62\2\0\1\42\22\0\1\60\1\44\1\57\1\53\1\67\1\51\1\55\1\56\1\66"+
    "\1\54\1\41\1\33\1\52\1\64\1\34\1\32\2\50\10\35\1\47\1\43\2\0\1\46\1\0\1\63"+
    "\1\1\1\23\1\4\1\2\1\6\1\30\1\5\1\11\1\36\1\45\1\40\1\12\1\17\1\3\1\13\1\26"+
    "\1\7\1\21\1\37\1\10\1\20\1\16\1\24\1\15\1\27\1\31\3\0\1\55\1\44\1\0\1\1\1"+
    "\23\1\4\1\2\1\6\1\30\1\5\1\11\1\36\1\45\1\40\1\12\1\17\1\3\1\13\1\26\1\7\1"+
    "\21\1\37\1\10\1\20\1\16\1\24\1\15\1\27\1\31\1\0\1\55\1\0\1\65\261\0\2\14\115"+
    "\0\1\22\52\0\1\25\125\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\4\10\10\1\11\1\10\1\1\3\10\1\1\1\12"+
    "\2\10\1\1\2\10\1\13\6\10\1\14\2\2\1\15"+
    "\1\16\1\17\1\20\2\1\1\21\1\1\1\22\1\23"+
    "\1\24\1\14\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\21\10\1\40\2\10"+
    "\1\41\3\10\1\40\3\10\1\40\2\0\4\10\1\0"+
    "\1\40\4\0\2\10\2\12\6\10\1\42\2\10\1\40"+
    "\13\10\1\43\1\44\1\45\2\17\1\46\1\0\1\47"+
    "\5\10\1\41\10\10\1\50\1\51\3\10\2\41\1\52"+
    "\2\10\1\11\1\10\2\0\1\40\1\0\7\10\1\53"+
    "\2\10\1\54\5\10\1\55\1\56\2\10\1\57\1\60"+
    "\1\10\1\61\1\62\1\11\1\60\2\10\1\54\3\10"+
    "\1\63\1\64\1\65\1\66\1\67\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u01c0\0\u02d8\0\u01c0"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u0460\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620"+
    "\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0"+
    "\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u01c0"+
    "\0\u01c0\0\u09a0\0\u01c0\0\u09d8\0\u0a10\0\u01c0\0\u0a48\0\u01c0"+
    "\0\u01c0\0\u01c0\0\u0a80\0\u01c0\0\u01c0\0\u01c0\0\u01c0\0\u01c0"+
    "\0\u0ab8\0\u01c0\0\u0af0\0\u0b28\0\u0b60\0\u01c0\0\u0b98\0\u0bd0"+
    "\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90"+
    "\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50"+
    "\0\u0f88\0\u0fc0\0\u0460\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8"+
    "\0\u1110\0\u1148\0\u0460\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260"+
    "\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420"+
    "\0\u1458\0\u0460\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8"+
    "\0\u15e0\0\u06c8\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730"+
    "\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0"+
    "\0\u01c0\0\u01c0\0\u01c0\0\u09d8\0\u0a10\0\u0a48\0\u0b28\0\u0460"+
    "\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0"+
    "\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u0460\0\u0460"+
    "\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u01c0\0\u01c0\0\u1d18\0\u1d50"+
    "\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u01c0\0\u1e68\0\u1ea0\0\u1ed8"+
    "\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u0460\0\u2028\0\u2060"+
    "\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0\0\u0460\0\u0460"+
    "\0\u21e8\0\u2220\0\u0460\0\u0460\0\u2258\0\u0460\0\u0460\0\u01c0"+
    "\0\u01c0\0\u2290\0\u22c8\0\u01c0\0\u2300\0\u2338\0\u2370\0\u0460"+
    "\0\u0460\0\u0460\0\u0460\0\u0460\0\u0460";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\13\12\1\11\5\12\1\11\2\12\1\11\4\12"+
    "\4\11\3\12\1\13\1\14\1\15\2\12\1\11\1\16"+
    "\10\11\2\17\1\20\6\11\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\27\1\32\1\33"+
    "\1\34\1\27\1\35\1\27\1\36\1\37\1\40\1\27"+
    "\1\11\1\41\1\27\1\42\1\27\2\11\1\43\1\11"+
    "\1\44\1\45\1\27\1\11\1\14\1\15\2\27\12\11"+
    "\2\46\1\20\6\11\3\27\1\47\4\27\1\50\2\27"+
    "\1\11\1\27\1\51\2\27\1\52\1\11\1\53\1\27"+
    "\1\11\2\27\1\54\1\27\2\11\1\43\1\11\3\27"+
    "\1\11\1\14\1\15\2\27\12\11\2\46\1\20\47\11"+
    "\1\14\1\15\14\11\2\55\1\20\6\11\4\12\1\56"+
    "\6\12\1\11\1\12\1\57\3\12\1\11\2\12\1\11"+
    "\4\12\1\60\1\61\1\11\1\62\3\12\1\63\1\14"+
    "\1\15\2\12\1\64\1\65\1\62\1\60\1\66\1\67"+
    "\1\70\1\60\1\71\1\72\1\73\1\11\1\20\1\74"+
    "\1\75\1\76\1\77\1\100\42\101\1\14\1\15\6\101"+
    "\1\102\5\101\1\73\1\11\1\20\5\101\42\103\1\14"+
    "\1\15\12\103\1\104\3\103\1\20\5\103\42\105\1\14"+
    "\1\15\13\105\1\106\2\105\1\20\5\105\70\0\32\12"+
    "\2\0\5\12\2\0\4\12\1\0\2\12\15\0\1\12"+
    "\42\13\1\0\17\13\1\0\5\13\62\0\1\20\5\0"+
    "\42\15\1\0\17\15\1\0\5\15\60\0\2\17\6\0"+
    "\2\27\2\107\6\27\1\110\1\111\7\27\1\112\6\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\2\27"+
    "\1\113\1\114\1\23\1\115\1\27\1\116\4\27\1\117"+
    "\1\120\1\121\1\27\1\122\2\27\1\123\7\27\2\0"+
    "\2\27\1\120\1\123\1\27\2\0\4\27\1\0\2\27"+
    "\15\0\7\27\1\124\23\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\2\27\1\125\3\27\1\126\1\127"+
    "\2\27\1\130\1\131\1\132\15\27\1\133\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\11\27\1\31\10\27"+
    "\1\134\10\27\2\0\5\27\2\0\4\27\1\0\2\27"+
    "\15\0\4\27\1\135\3\27\1\136\5\27\1\137\14\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\33\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\7\27"+
    "\1\140\5\27\1\141\15\27\2\0\2\27\1\141\2\27"+
    "\2\0\4\27\1\0\2\27\15\0\17\27\1\142\2\27"+
    "\1\143\10\27\2\0\5\27\2\0\4\27\1\0\2\27"+
    "\15\0\1\27\3\0\1\144\26\0\1\145\35\0\13\27"+
    "\1\117\3\27\1\110\12\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\14\27\1\146\4\27\1\147\11\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\2\27"+
    "\1\150\6\27\1\151\21\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\1\27\4\0\1\152\3\0\1\153"+
    "\1\0\1\154\5\0\1\155\1\156\2\0\1\157\43\0"+
    "\1\27\1\160\2\27\1\161\14\27\1\162\1\163\4\27"+
    "\1\164\2\27\2\0\3\27\1\163\1\27\2\0\4\27"+
    "\1\0\2\27\15\0\2\27\1\165\16\27\1\166\11\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\7\27"+
    "\1\167\3\27\1\170\4\27\1\171\12\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\1\27\1\0\13\172"+
    "\1\0\5\172\1\0\2\172\1\0\4\172\3\0\4\172"+
    "\4\0\1\172\2\0\1\172\17\0\3\27\1\173\26\27"+
    "\1\145\1\0\5\27\2\0\4\27\1\0\2\27\15\0"+
    "\5\27\1\174\3\27\1\175\1\27\1\147\5\27\1\176"+
    "\1\177\2\27\1\200\5\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\1\27\60\0\2\46\6\0\13\27"+
    "\1\201\16\27\2\0\5\27\2\0\4\27\1\0\2\27"+
    "\15\0\5\27\1\202\3\27\1\203\6\27\1\204\12\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\5\27"+
    "\1\202\3\27\1\203\21\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\14\27\1\205\16\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\15\27\1\206\15\27"+
    "\2\0\2\27\1\206\2\27\2\0\4\27\1\0\2\27"+
    "\15\0\7\27\1\207\4\27\1\210\16\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\1\27\60\0\2\55"+
    "\6\0\32\12\2\0\5\12\2\0\4\12\1\0\2\12"+
    "\11\0\1\211\3\0\33\12\2\0\5\12\1\212\1\0"+
    "\4\12\1\0\2\12\11\0\1\213\3\0\1\12\35\0"+
    "\1\62\12\0\1\62\20\0\2\214\1\0\1\214\1\0"+
    "\1\214\14\0\1\214\4\0\1\214\4\0\1\214\12\0"+
    "\1\214\67\0\1\215\54\0\1\216\12\0\1\216\77\0"+
    "\1\73\7\0\42\101\1\0\7\101\1\0\5\101\3\0"+
    "\5\101\42\103\1\0\13\103\1\217\3\103\1\0\5\103"+
    "\56\0\1\103\11\0\42\105\1\0\14\105\1\0\2\105"+
    "\1\0\5\105\2\27\1\143\27\27\2\0\5\27\2\0"+
    "\4\27\1\0\2\27\15\0\13\27\1\220\17\27\2\0"+
    "\5\27\2\0\4\27\1\0\2\27\15\0\22\27\1\221"+
    "\10\27\2\0\5\27\2\0\4\27\1\0\2\27\15\0"+
    "\23\27\1\133\7\27\2\0\3\27\1\133\1\27\2\0"+
    "\4\27\1\0\2\27\15\0\3\27\2\107\4\27\1\222"+
    "\12\27\1\112\6\27\2\0\5\27\2\0\4\27\1\0"+
    "\2\27\15\0\7\27\1\223\5\27\1\224\15\27\2\0"+
    "\2\27\1\224\2\27\2\0\4\27\1\0\2\27\15\0"+
    "\2\27\1\225\3\27\1\126\1\127\2\27\1\130\1\131"+
    "\16\27\1\133\2\0\5\27\2\0\4\27\1\0\2\27"+
    "\15\0\5\27\1\226\10\27\1\143\14\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\22\27\1\143\10\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\4\27"+
    "\1\173\12\27\1\143\13\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\14\27\1\117\16\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\21\27\1\147\11\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\11\27"+
    "\1\143\1\27\1\147\5\27\1\176\1\177\2\27\1\200"+
    "\5\27\2\0\5\27\2\0\4\27\1\0\2\27\15\0"+
    "\6\27\1\133\24\27\2\0\5\27\2\0\4\27\1\0"+
    "\2\27\15\0\13\27\1\227\6\27\1\230\1\231\7\27"+
    "\2\0\3\27\1\231\1\27\2\0\4\27\1\0\2\27"+
    "\15\0\7\27\1\143\1\27\1\143\21\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\10\27\1\143\22\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\7\27"+
    "\1\143\23\27\2\0\5\27\2\0\4\27\1\0\2\27"+
    "\15\0\14\27\1\232\5\27\1\133\10\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\4\27\1\233\10\27"+
    "\1\234\11\27\1\235\3\27\2\0\2\27\1\234\2\27"+
    "\2\0\4\27\1\0\2\27\15\0\14\27\1\236\16\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\3\27"+
    "\1\237\27\27\2\0\5\27\2\0\4\27\1\0\2\27"+
    "\15\0\21\27\1\240\11\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\7\27\1\241\5\27\1\233\15\27"+
    "\2\0\2\27\1\233\2\27\2\0\4\27\1\0\2\27"+
    "\15\0\16\27\1\242\14\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\11\27\1\243\21\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\31\27\1\31\1\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\1\27"+
    "\4\0\1\244\11\0\1\245\64\0\1\246\54\0\16\27"+
    "\1\247\13\27\2\0\5\27\2\0\4\27\1\0\2\27"+
    "\15\0\13\27\1\143\17\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\4\27\1\250\26\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\4\27\1\251\1\27"+
    "\1\252\24\27\2\0\5\27\2\0\4\27\1\0\2\27"+
    "\15\0\1\27\1\0\1\253\107\0\1\254\60\0\1\255"+
    "\100\0\1\255\45\0\1\255\2\0\1\255\5\0\1\255"+
    "\62\0\1\256\62\0\4\27\1\257\25\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\14\27\1\260\16\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\23\27"+
    "\1\240\7\27\2\0\3\27\1\240\1\27\2\0\4\27"+
    "\1\0\2\27\15\0\11\27\1\261\21\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\22\27\1\262\10\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\23\27"+
    "\1\263\7\27\2\0\3\27\1\263\1\27\2\0\4\27"+
    "\1\0\2\27\15\0\11\27\1\264\21\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\14\27\1\265\16\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\11\27"+
    "\1\266\21\27\2\0\5\27\2\0\4\27\1\0\2\27"+
    "\15\0\5\27\1\226\11\27\1\133\13\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\2\27\1\267\30\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\22\27"+
    "\1\270\10\27\2\0\5\27\2\0\4\27\1\0\2\27"+
    "\15\0\24\27\1\143\6\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\2\27\1\143\2\27\1\143\5\27"+
    "\1\143\17\27\2\0\5\27\2\0\4\27\1\0\2\27"+
    "\15\0\6\27\1\117\24\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\13\27\1\271\17\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\12\27\1\272\20\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\7\27"+
    "\1\273\23\27\2\0\5\27\2\0\4\27\1\0\2\27"+
    "\15\0\14\27\1\274\16\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\25\27\1\271\5\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\2\27\1\275\30\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\4\27"+
    "\1\276\26\27\2\0\5\27\2\0\4\27\1\0\2\27"+
    "\15\0\22\27\1\277\10\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\6\27\1\240\24\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\2\27\1\300\30\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\5\27"+
    "\1\226\25\27\2\0\5\27\2\0\4\27\1\0\2\27"+
    "\15\0\17\27\1\143\13\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\23\27\1\231\7\27\2\0\3\27"+
    "\1\231\1\27\2\0\4\27\1\0\2\27\15\0\11\27"+
    "\1\133\21\27\2\0\5\27\2\0\4\27\1\0\2\27"+
    "\15\0\13\27\1\162\17\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\22\27\1\301\10\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\7\27\1\133\23\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\6\27"+
    "\1\143\24\27\2\0\5\27\2\0\4\27\1\0\2\27"+
    "\15\0\11\27\1\31\21\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\4\27\1\302\26\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\30\27\1\303\2\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\20\27"+
    "\1\240\12\27\2\0\5\27\2\0\4\27\1\0\2\27"+
    "\15\0\5\27\1\31\25\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\11\27\1\304\21\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\13\27\1\305\17\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\1\27"+
    "\10\0\1\245\57\0\6\27\1\306\23\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\3\27\1\307\27\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\5\27"+
    "\1\31\16\27\1\31\6\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\22\27\1\31\10\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\1\27\3\0\1\310"+
    "\100\0\1\311\21\0\1\311\52\0\1\255\46\0\25\27"+
    "\1\220\4\27\2\0\4\27\1\220\2\0\4\27\1\0"+
    "\2\27\15\0\27\27\1\235\3\27\2\0\5\27\2\0"+
    "\4\27\1\0\2\27\15\0\7\27\1\300\23\27\2\0"+
    "\5\27\2\0\4\27\1\0\2\27\15\0\23\27\1\312"+
    "\7\27\2\0\3\27\1\312\1\27\2\0\4\27\1\0"+
    "\2\27\15\0\12\27\1\133\20\27\2\0\5\27\2\0"+
    "\4\27\1\0\2\27\15\0\5\27\1\263\25\27\2\0"+
    "\5\27\2\0\4\27\1\0\2\27\15\0\2\27\1\313"+
    "\30\27\2\0\5\27\2\0\4\27\1\0\2\27\15\0"+
    "\4\27\1\31\26\27\2\0\5\27\2\0\4\27\1\0"+
    "\2\27\15\0\15\27\1\304\15\27\2\0\2\27\1\304"+
    "\2\27\2\0\4\27\1\0\2\27\15\0\33\27\1\0"+
    "\1\314\5\27\2\0\4\27\1\0\2\27\15\0\2\27"+
    "\1\315\30\27\2\0\5\27\2\0\4\27\1\0\2\27"+
    "\15\0\16\27\1\316\14\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\17\27\1\317\13\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\23\27\1\320\7\27"+
    "\2\0\3\27\1\320\1\27\2\0\4\27\1\0\2\27"+
    "\15\0\3\27\1\321\27\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\30\27\1\31\2\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\5\27\1\143\25\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\7\27"+
    "\1\304\23\27\2\0\5\27\2\0\4\27\1\0\2\27"+
    "\15\0\7\27\1\220\23\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\11\27\1\322\21\27\2\0\5\27"+
    "\2\0\4\27\1\0\2\27\15\0\22\27\1\323\10\27"+
    "\2\0\5\27\2\0\4\27\1\0\2\27\15\0\11\27"+
    "\1\324\21\27\2\0\5\27\2\0\4\27\1\0\2\27"+
    "\15\0\7\27\1\325\23\27\2\0\5\27\2\0\4\27"+
    "\1\0\2\27\15\0\1\27";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9128];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\4\1\1\11\1\1\1\11\37\1\2\11"+
    "\1\1\1\11\2\1\1\11\1\1\3\11\1\1\5\11"+
    "\1\1\1\11\3\1\1\11\35\1\2\0\4\1\1\0"+
    "\1\1\4\0\31\1\3\11\3\1\1\0\25\1\2\11"+
    "\4\1\2\0\1\11\1\0\31\1\2\11\2\1\1\11"+
    "\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int fmtLevel = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Xga99RLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 57: break;
          case 2: 
            { return Xga99RTypes.IDENT;
            } 
            // fall through
          case 58: break;
          case 3: 
            { return Xga99RTypes.LCOMMENT;
            } 
            // fall through
          case 59: break;
          case 4: 
            { yybegin(YYINITIAL); return Xga99RTypes.CRLF;
            } 
            // fall through
          case 60: break;
          case 5: 
            { return Xga99RTypes.COMMENT;
            } 
            // fall through
          case 61: break;
          case 6: 
            { return Xga99RTypes.OP_COLON;
            } 
            // fall through
          case 62: break;
          case 7: 
            { if (fmtLevel > 0) yybegin(FMNEMONIC); else yybegin(MNEMONIC);
                         return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 63: break;
          case 8: 
            { return Xga99RTypes.UNKNOWN;
            } 
            // fall through
          case 64: break;
          case 9: 
            { yybegin(MNEMONICO); return Xga99RTypes.INSTR_V;
            } 
            // fall through
          case 65: break;
          case 10: 
            { return Xga99RTypes.INSTR_III;
            } 
            // fall through
          case 66: break;
          case 11: 
            { yybegin(ARGUMENTS); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 67: break;
          case 12: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 68: break;
          case 13: 
            { return Xga99RTypes.OP_MISC;
            } 
            // fall through
          case 69: break;
          case 14: 
            { return Xga99RTypes.OP_PLUS;
            } 
            // fall through
          case 70: break;
          case 15: 
            { return Xga99RTypes.INT;
            } 
            // fall through
          case 71: break;
          case 16: 
            { return Xga99RTypes.OP_AST;
            } 
            // fall through
          case 72: break;
          case 17: 
            { return Xga99RTypes.OP_SEP;
            } 
            // fall through
          case 73: break;
          case 18: 
            { return Xga99RTypes.OP_RPAREN;
            } 
            // fall through
          case 74: break;
          case 19: 
            { yybegin(TLIT); return Xga99RTypes.OP_QUOTE;
            } 
            // fall through
          case 75: break;
          case 20: 
            { yybegin(FLIT); return Xga99RTypes.OP_FQUOTE;
            } 
            // fall through
          case 76: break;
          case 21: 
            { return Xga99RTypes.OP_AT;
            } 
            // fall through
          case 77: break;
          case 22: 
            { return Xga99RTypes.OP_MINUS;
            } 
            // fall through
          case 78: break;
          case 23: 
            { return Xga99RTypes.OP_NOT;
            } 
            // fall through
          case 79: break;
          case 24: 
            { return Xga99RTypes.OP_LPAREN;
            } 
            // fall through
          case 80: break;
          case 25: 
            { return Xga99RTypes.OP_LC;
            } 
            // fall through
          case 81: break;
          case 26: 
            { return Xga99RTypes.PP_ARG;
            } 
            // fall through
          case 82: break;
          case 27: 
            { return Xga99RTypes.PP_SEP;
            } 
            // fall through
          case 83: break;
          case 28: 
            { return Xga99RTypes.TEXT;
            } 
            // fall through
          case 84: break;
          case 29: 
            { yybegin(ARGUMENTS); return Xga99RTypes.OP_QUOTE;
            } 
            // fall through
          case 85: break;
          case 30: 
            { return Xga99RTypes.FNAME;
            } 
            // fall through
          case 86: break;
          case 31: 
            { yybegin(ARGUMENTS); return Xga99RTypes.OP_FQUOTE;
            } 
            // fall through
          case 87: break;
          case 32: 
            { return Xga99RTypes.INSTR_I;
            } 
            // fall through
          case 88: break;
          case 33: 
            { return Xga99RTypes.INSTR_VI;
            } 
            // fall through
          case 89: break;
          case 34: 
            { yybegin(PREPROC); return Xga99RTypes.PREP;
            } 
            // fall through
          case 90: break;
          case 35: 
            { return Xga99RTypes.GADDR;
            } 
            // fall through
          case 91: break;
          case 36: 
            { return Xga99RTypes.VINDR;
            } 
            // fall through
          case 92: break;
          case 37: 
            { return Xga99RTypes.VADDR;
            } 
            // fall through
          case 93: break;
          case 38: 
            { return Xga99RTypes.PP_PARAM;
            } 
            // fall through
          case 94: break;
          case 39: 
            { return Xga99RTypes.INSTR_II;
            } 
            // fall through
          case 95: break;
          case 40: 
            { return Xga99RTypes.DIR_L;
            } 
            // fall through
          case 96: break;
          case 41: 
            { return Xga99RTypes.DIR_S;
            } 
            // fall through
          case 97: break;
          case 42: 
            { return Xga99RTypes.INSTR_VIII;
            } 
            // fall through
          case 98: break;
          case 43: 
            { fmtLevel = 1; yybegin(MNEMONICO); return Xga99RTypes.INSTR_X;
            } 
            // fall through
          case 99: break;
          case 44: 
            { return Xga99RTypes.INSTR_F_I;
            } 
            // fall through
          case 100: break;
          case 45: 
            { fmtLevel += 1; return Xga99RTypes.INSTR_F_V;
            } 
            // fall through
          case 101: break;
          case 46: 
            { return Xga99RTypes.DIR_M;
            } 
            // fall through
          case 102: break;
          case 47: 
            { return Xga99RTypes.DIR_C;
            } 
            // fall through
          case 103: break;
          case 48: 
            { return Xga99RTypes.DIR_T;
            } 
            // fall through
          case 104: break;
          case 49: 
            { return Xga99RTypes.INSTR_IX;
            } 
            // fall through
          case 105: break;
          case 50: 
            { return Xga99RTypes.INSTR_VII;
            } 
            // fall through
          case 106: break;
          case 51: 
            { return Xga99RTypes.INSTR_F_II;
            } 
            // fall through
          case 107: break;
          case 52: 
            { fmtLevel -= 1; return Xga99RTypes.INSTR_F_X;
            } 
            // fall through
          case 108: break;
          case 53: 
            { return Xga99RTypes.DIR_F;
            } 
            // fall through
          case 109: break;
          case 54: 
            { return Xga99RTypes.INSTR_F_III;
            } 
            // fall through
          case 110: break;
          case 55: 
            { return Xga99RTypes.INSTR_F_IV;
            } 
            // fall through
          case 111: break;
          case 56: 
            { return Xga99RTypes.INSTR_F_IX;
            } 
            // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
