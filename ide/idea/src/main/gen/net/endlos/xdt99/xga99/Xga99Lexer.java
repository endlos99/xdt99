/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package net.endlos.xdt99.xga99;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import net.endlos.xdt99.xga99.psi.Xga99Types;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Xga99.flex</tt>
 */
class Xga99Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MNEMONIC = 2;
  public static final int FMNEMONIC = 4;
  public static final int MNEMONICO = 6;
  public static final int ARGUMENTS = 8;
  public static final int COMMENT = 10;
  public static final int PREPROC = 12;
  public static final int TLIT = 14;
  public static final int FLIT = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\77\1\1\3\275\1");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\60\1\61\2\0\1\42\22\0\1\57\1\44\1\56\1\53\1\66\2\51\1\55\1\65\1\54"+
    "\1\41\1\33\1\52\1\63\1\34\1\32\2\50\10\35\1\47\1\43\2\0\1\46\1\0\1\62\1\1"+
    "\1\23\1\4\1\2\1\6\1\30\1\5\1\11\1\36\1\45\1\40\1\12\1\17\1\3\1\13\1\26\1\7"+
    "\1\21\1\37\1\10\1\20\1\16\1\24\1\15\1\27\1\31\3\0\1\51\1\44\1\0\1\1\1\23\1"+
    "\4\1\2\1\6\1\30\1\5\1\11\1\36\1\45\1\40\1\12\1\17\1\3\1\13\1\26\1\7\1\21\1"+
    "\37\1\10\1\20\1\16\1\24\1\15\1\27\1\31\1\0\1\51\1\0\1\64\261\0\2\14\115\0"+
    "\1\22\52\0\1\25\125\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\4\10\10\1\11\1\10\1\1\3\10\1\1\1\12"+
    "\2\10\1\1\2\10\1\13\6\10\1\14\2\2\1\15"+
    "\1\16\1\17\1\20\2\1\1\21\1\1\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\21\10\1\42"+
    "\2\10\1\43\3\10\1\42\3\10\1\42\2\0\4\10"+
    "\1\0\1\42\4\0\2\10\2\12\6\10\1\44\2\10"+
    "\1\42\13\10\1\45\1\46\1\47\2\17\1\50\1\0"+
    "\1\51\5\10\1\43\10\10\1\52\1\53\3\10\2\43"+
    "\1\54\2\10\1\11\1\10\2\0\1\42\1\0\7\10"+
    "\1\55\2\10\1\56\5\10\1\57\1\60\2\10\1\61"+
    "\1\62\1\10\1\63\1\64\1\11\1\62\2\10\1\56"+
    "\3\10\1\65\1\66\1\67\1\70\1\71\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u01ef\0\u0302"+
    "\0\u01ef\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483"+
    "\0\u04ba\0\u0483\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604"+
    "\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc"+
    "\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974"+
    "\0\u01ef\0\u01ef\0\u09ab\0\u01ef\0\u09e2\0\u0a19\0\u01ef\0\u0a50"+
    "\0\u01ef\0\u01ef\0\u01ef\0\u0906\0\u01ef\0\u01ef\0\u01ef\0\u01ef"+
    "\0\u01ef\0\u0a87\0\u0abe\0\u01ef\0\u0af5\0\u0b2c\0\u0b63\0\u01ef"+
    "\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b"+
    "\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3"+
    "\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0483\0\u0fe6\0\u101d\0\u1054"+
    "\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u0483\0\u1167\0\u119e\0\u11d5"+
    "\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d"+
    "\0\u13c4\0\u13fb\0\u1432\0\u0483\0\u1469\0\u14a0\0\u14d7\0\u150e"+
    "\0\u1545\0\u157c\0\u15b3\0\u06e0\0\u15ea\0\u1621\0\u1658\0\u168f"+
    "\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847"+
    "\0\u187e\0\u18b5\0\u01ef\0\u01ef\0\u01ef\0\u09e2\0\u0a19\0\u0a50"+
    "\0\u0b2c\0\u0483\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff"+
    "\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7"+
    "\0\u0483\0\u0483\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u01ef\0\u01ef"+
    "\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u01ef\0\u1e14"+
    "\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u0483"+
    "\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d"+
    "\0\u0483\0\u0483\0\u2184\0\u21bb\0\u0483\0\u0483\0\u21f2\0\u0483"+
    "\0\u0483\0\u01ef\0\u01ef\0\u2229\0\u2260\0\u01ef\0\u2297\0\u22ce"+
    "\0\u2305\0\u0483\0\u0483\0\u0483\0\u0483\0\u0483\0\u0483";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\13\13\1\12\5\13\1\12\2\13\1\12\4\13"+
    "\4\12\3\13\1\14\1\15\1\16\2\13\1\12\1\17"+
    "\7\12\2\20\1\21\6\12\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\30\1\33\1\34"+
    "\1\35\1\30\1\36\1\30\1\37\1\40\1\41\1\30"+
    "\1\12\1\42\1\30\1\43\1\30\2\12\1\44\1\12"+
    "\1\45\1\46\1\30\1\12\1\15\1\16\2\30\11\12"+
    "\2\47\1\21\6\12\3\30\1\50\4\30\1\51\2\30"+
    "\1\12\1\30\1\52\2\30\1\53\1\12\1\54\1\30"+
    "\1\12\2\30\1\55\1\30\2\12\1\44\1\12\3\30"+
    "\1\12\1\15\1\16\2\30\11\12\2\47\1\21\47\12"+
    "\1\15\1\16\13\12\2\56\1\21\6\12\4\13\1\57"+
    "\6\13\1\12\1\13\1\60\3\13\1\12\2\13\1\12"+
    "\4\13\1\61\1\62\1\12\1\63\3\13\1\64\1\15"+
    "\1\16\2\13\1\65\1\66\1\63\1\61\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\56\1\21\1\75\1\76"+
    "\1\77\1\100\1\101\42\102\1\15\1\16\15\102\1\21"+
    "\5\102\42\103\1\15\1\16\6\103\1\104\4\103\1\74"+
    "\1\56\1\21\5\103\42\105\1\15\1\16\11\105\1\106"+
    "\3\105\1\21\5\105\42\107\1\15\1\16\12\107\1\110"+
    "\2\107\1\21\5\107\67\0\32\13\2\0\5\13\2\0"+
    "\4\13\1\0\1\13\15\0\1\13\42\14\1\0\16\14"+
    "\1\0\5\14\61\0\1\21\5\0\42\16\1\0\16\16"+
    "\1\0\5\16\57\0\2\20\6\0\2\30\2\111\6\30"+
    "\1\112\1\113\7\30\1\114\6\30\2\0\5\30\2\0"+
    "\4\30\1\0\1\30\15\0\2\30\1\115\1\116\1\24"+
    "\1\117\1\30\1\120\4\30\1\121\1\122\1\123\1\30"+
    "\1\124\2\30\1\125\7\30\2\0\2\30\1\122\1\125"+
    "\1\30\2\0\4\30\1\0\1\30\15\0\7\30\1\126"+
    "\23\30\2\0\5\30\2\0\4\30\1\0\1\30\15\0"+
    "\2\30\1\127\3\30\1\130\1\131\2\30\1\132\1\133"+
    "\1\134\15\30\1\135\2\0\5\30\2\0\4\30\1\0"+
    "\1\30\15\0\11\30\1\32\10\30\1\136\10\30\2\0"+
    "\5\30\2\0\4\30\1\0\1\30\15\0\4\30\1\137"+
    "\3\30\1\140\5\30\1\141\14\30\2\0\5\30\2\0"+
    "\4\30\1\0\1\30\15\0\33\30\2\0\5\30\2\0"+
    "\4\30\1\0\1\30\15\0\7\30\1\142\5\30\1\143"+
    "\15\30\2\0\2\30\1\143\2\30\2\0\4\30\1\0"+
    "\1\30\15\0\17\30\1\144\2\30\1\145\10\30\2\0"+
    "\5\30\2\0\4\30\1\0\1\30\15\0\1\30\3\0"+
    "\1\146\26\0\1\147\34\0\13\30\1\121\3\30\1\112"+
    "\12\30\2\0\5\30\2\0\4\30\1\0\1\30\15\0"+
    "\14\30\1\150\4\30\1\151\11\30\2\0\5\30\2\0"+
    "\4\30\1\0\1\30\15\0\2\30\1\152\6\30\1\153"+
    "\21\30\2\0\5\30\2\0\4\30\1\0\1\30\15\0"+
    "\1\30\4\0\1\154\3\0\1\155\1\0\1\156\5\0"+
    "\1\157\1\160\2\0\1\161\42\0\1\30\1\162\2\30"+
    "\1\163\14\30\1\164\1\165\4\30\1\166\2\30\2\0"+
    "\3\30\1\165\1\30\2\0\4\30\1\0\1\30\15\0"+
    "\2\30\1\167\16\30\1\170\11\30\2\0\5\30\2\0"+
    "\4\30\1\0\1\30\15\0\7\30\1\171\3\30\1\172"+
    "\4\30\1\173\12\30\2\0\5\30\2\0\4\30\1\0"+
    "\1\30\15\0\1\30\1\0\13\174\1\0\5\174\1\0"+
    "\2\174\1\0\4\174\3\0\4\174\4\0\1\174\2\0"+
    "\1\174\16\0\3\30\1\175\26\30\1\147\1\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\5\30\1\176\3\30"+
    "\1\177\1\30\1\151\5\30\1\200\1\201\2\30\1\202"+
    "\5\30\2\0\5\30\2\0\4\30\1\0\1\30\15\0"+
    "\1\30\57\0\2\47\6\0\13\30\1\203\16\30\2\0"+
    "\5\30\2\0\4\30\1\0\1\30\15\0\5\30\1\204"+
    "\3\30\1\205\6\30\1\206\12\30\2\0\5\30\2\0"+
    "\4\30\1\0\1\30\15\0\5\30\1\204\3\30\1\205"+
    "\21\30\2\0\5\30\2\0\4\30\1\0\1\30\15\0"+
    "\14\30\1\207\16\30\2\0\5\30\2\0\4\30\1\0"+
    "\1\30\15\0\15\30\1\210\15\30\2\0\2\30\1\210"+
    "\2\30\2\0\4\30\1\0\1\30\15\0\7\30\1\211"+
    "\4\30\1\212\16\30\2\0\5\30\2\0\4\30\1\0"+
    "\1\30\15\0\1\30\57\0\2\56\6\0\32\13\2\0"+
    "\5\13\2\0\4\13\1\0\1\13\11\0\1\213\3\0"+
    "\33\13\2\0\5\13\1\214\1\0\4\13\1\0\1\13"+
    "\11\0\1\215\3\0\1\13\35\0\1\63\12\0\1\63"+
    "\17\0\2\216\1\0\1\216\1\0\1\216\14\0\1\216"+
    "\4\0\1\216\4\0\1\216\12\0\1\216\66\0\1\217"+
    "\53\0\1\220\12\0\1\220\16\0\42\102\1\0\16\102"+
    "\1\0\5\102\42\103\1\0\7\103\1\0\4\103\3\0"+
    "\5\103\42\105\1\0\12\105\1\221\3\105\1\0\5\105"+
    "\55\0\1\105\11\0\42\107\1\0\13\107\1\0\2\107"+
    "\1\0\5\107\2\30\1\145\27\30\2\0\5\30\2\0"+
    "\4\30\1\0\1\30\15\0\13\30\1\222\17\30\2\0"+
    "\5\30\2\0\4\30\1\0\1\30\15\0\22\30\1\223"+
    "\10\30\2\0\5\30\2\0\4\30\1\0\1\30\15\0"+
    "\23\30\1\135\7\30\2\0\3\30\1\135\1\30\2\0"+
    "\4\30\1\0\1\30\15\0\3\30\2\111\4\30\1\224"+
    "\12\30\1\114\6\30\2\0\5\30\2\0\4\30\1\0"+
    "\1\30\15\0\7\30\1\225\5\30\1\226\15\30\2\0"+
    "\2\30\1\226\2\30\2\0\4\30\1\0\1\30\15\0"+
    "\2\30\1\227\3\30\1\130\1\131\2\30\1\132\1\133"+
    "\16\30\1\135\2\0\5\30\2\0\4\30\1\0\1\30"+
    "\15\0\5\30\1\230\10\30\1\145\14\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\22\30\1\145\10\30"+
    "\2\0\5\30\2\0\4\30\1\0\1\30\15\0\4\30"+
    "\1\175\12\30\1\145\13\30\2\0\5\30\2\0\4\30"+
    "\1\0\1\30\15\0\14\30\1\121\16\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\21\30\1\151\11\30"+
    "\2\0\5\30\2\0\4\30\1\0\1\30\15\0\11\30"+
    "\1\145\1\30\1\151\5\30\1\200\1\201\2\30\1\202"+
    "\5\30\2\0\5\30\2\0\4\30\1\0\1\30\15\0"+
    "\6\30\1\135\24\30\2\0\5\30\2\0\4\30\1\0"+
    "\1\30\15\0\13\30\1\231\6\30\1\232\1\233\7\30"+
    "\2\0\3\30\1\233\1\30\2\0\4\30\1\0\1\30"+
    "\15\0\7\30\1\145\1\30\1\145\21\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\10\30\1\145\22\30"+
    "\2\0\5\30\2\0\4\30\1\0\1\30\15\0\7\30"+
    "\1\145\23\30\2\0\5\30\2\0\4\30\1\0\1\30"+
    "\15\0\14\30\1\234\5\30\1\135\10\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\4\30\1\235\10\30"+
    "\1\236\11\30\1\237\3\30\2\0\2\30\1\236\2\30"+
    "\2\0\4\30\1\0\1\30\15\0\14\30\1\240\16\30"+
    "\2\0\5\30\2\0\4\30\1\0\1\30\15\0\3\30"+
    "\1\241\27\30\2\0\5\30\2\0\4\30\1\0\1\30"+
    "\15\0\21\30\1\242\11\30\2\0\5\30\2\0\4\30"+
    "\1\0\1\30\15\0\7\30\1\243\5\30\1\235\15\30"+
    "\2\0\2\30\1\235\2\30\2\0\4\30\1\0\1\30"+
    "\15\0\16\30\1\244\14\30\2\0\5\30\2\0\4\30"+
    "\1\0\1\30\15\0\11\30\1\245\21\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\31\30\1\32\1\30"+
    "\2\0\5\30\2\0\4\30\1\0\1\30\15\0\1\30"+
    "\4\0\1\246\11\0\1\247\63\0\1\250\53\0\16\30"+
    "\1\251\13\30\2\0\5\30\2\0\4\30\1\0\1\30"+
    "\15\0\13\30\1\145\17\30\2\0\5\30\2\0\4\30"+
    "\1\0\1\30\15\0\4\30\1\252\26\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\4\30\1\253\1\30"+
    "\1\254\24\30\2\0\5\30\2\0\4\30\1\0\1\30"+
    "\15\0\1\30\1\0\1\255\106\0\1\256\57\0\1\257"+
    "\77\0\1\257\44\0\1\257\2\0\1\257\5\0\1\257"+
    "\61\0\1\260\61\0\4\30\1\261\25\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\14\30\1\262\16\30"+
    "\2\0\5\30\2\0\4\30\1\0\1\30\15\0\23\30"+
    "\1\242\7\30\2\0\3\30\1\242\1\30\2\0\4\30"+
    "\1\0\1\30\15\0\11\30\1\263\21\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\22\30\1\264\10\30"+
    "\2\0\5\30\2\0\4\30\1\0\1\30\15\0\23\30"+
    "\1\265\7\30\2\0\3\30\1\265\1\30\2\0\4\30"+
    "\1\0\1\30\15\0\11\30\1\266\21\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\14\30\1\267\16\30"+
    "\2\0\5\30\2\0\4\30\1\0\1\30\15\0\11\30"+
    "\1\270\21\30\2\0\5\30\2\0\4\30\1\0\1\30"+
    "\15\0\5\30\1\230\11\30\1\135\13\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\2\30\1\271\30\30"+
    "\2\0\5\30\2\0\4\30\1\0\1\30\15\0\22\30"+
    "\1\272\10\30\2\0\5\30\2\0\4\30\1\0\1\30"+
    "\15\0\24\30\1\145\6\30\2\0\5\30\2\0\4\30"+
    "\1\0\1\30\15\0\2\30\1\145\2\30\1\145\5\30"+
    "\1\145\17\30\2\0\5\30\2\0\4\30\1\0\1\30"+
    "\15\0\6\30\1\121\24\30\2\0\5\30\2\0\4\30"+
    "\1\0\1\30\15\0\13\30\1\273\17\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\12\30\1\274\20\30"+
    "\2\0\5\30\2\0\4\30\1\0\1\30\15\0\7\30"+
    "\1\275\23\30\2\0\5\30\2\0\4\30\1\0\1\30"+
    "\15\0\14\30\1\276\16\30\2\0\5\30\2\0\4\30"+
    "\1\0\1\30\15\0\25\30\1\273\5\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\2\30\1\277\30\30"+
    "\2\0\5\30\2\0\4\30\1\0\1\30\15\0\4\30"+
    "\1\300\26\30\2\0\5\30\2\0\4\30\1\0\1\30"+
    "\15\0\22\30\1\301\10\30\2\0\5\30\2\0\4\30"+
    "\1\0\1\30\15\0\6\30\1\242\24\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\2\30\1\302\30\30"+
    "\2\0\5\30\2\0\4\30\1\0\1\30\15\0\5\30"+
    "\1\230\25\30\2\0\5\30\2\0\4\30\1\0\1\30"+
    "\15\0\17\30\1\145\13\30\2\0\5\30\2\0\4\30"+
    "\1\0\1\30\15\0\23\30\1\233\7\30\2\0\3\30"+
    "\1\233\1\30\2\0\4\30\1\0\1\30\15\0\11\30"+
    "\1\135\21\30\2\0\5\30\2\0\4\30\1\0\1\30"+
    "\15\0\13\30\1\164\17\30\2\0\5\30\2\0\4\30"+
    "\1\0\1\30\15\0\22\30\1\303\10\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\7\30\1\135\23\30"+
    "\2\0\5\30\2\0\4\30\1\0\1\30\15\0\6\30"+
    "\1\145\24\30\2\0\5\30\2\0\4\30\1\0\1\30"+
    "\15\0\11\30\1\32\21\30\2\0\5\30\2\0\4\30"+
    "\1\0\1\30\15\0\4\30\1\304\26\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\30\30\1\305\2\30"+
    "\2\0\5\30\2\0\4\30\1\0\1\30\15\0\20\30"+
    "\1\242\12\30\2\0\5\30\2\0\4\30\1\0\1\30"+
    "\15\0\5\30\1\32\25\30\2\0\5\30\2\0\4\30"+
    "\1\0\1\30\15\0\11\30\1\306\21\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\13\30\1\307\17\30"+
    "\2\0\5\30\2\0\4\30\1\0\1\30\15\0\1\30"+
    "\10\0\1\247\56\0\6\30\1\310\23\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\3\30\1\311\27\30"+
    "\2\0\5\30\2\0\4\30\1\0\1\30\15\0\5\30"+
    "\1\32\16\30\1\32\6\30\2\0\5\30\2\0\4\30"+
    "\1\0\1\30\15\0\22\30\1\32\10\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\1\30\3\0\1\312"+
    "\77\0\1\313\21\0\1\313\51\0\1\257\45\0\25\30"+
    "\1\222\4\30\2\0\4\30\1\222\2\0\4\30\1\0"+
    "\1\30\15\0\27\30\1\237\3\30\2\0\5\30\2\0"+
    "\4\30\1\0\1\30\15\0\7\30\1\302\23\30\2\0"+
    "\5\30\2\0\4\30\1\0\1\30\15\0\23\30\1\314"+
    "\7\30\2\0\3\30\1\314\1\30\2\0\4\30\1\0"+
    "\1\30\15\0\12\30\1\135\20\30\2\0\5\30\2\0"+
    "\4\30\1\0\1\30\15\0\5\30\1\265\25\30\2\0"+
    "\5\30\2\0\4\30\1\0\1\30\15\0\2\30\1\315"+
    "\30\30\2\0\5\30\2\0\4\30\1\0\1\30\15\0"+
    "\4\30\1\32\26\30\2\0\5\30\2\0\4\30\1\0"+
    "\1\30\15\0\15\30\1\306\15\30\2\0\2\30\1\306"+
    "\2\30\2\0\4\30\1\0\1\30\15\0\33\30\1\0"+
    "\1\316\5\30\2\0\4\30\1\0\1\30\15\0\2\30"+
    "\1\317\30\30\2\0\5\30\2\0\4\30\1\0\1\30"+
    "\15\0\16\30\1\320\14\30\2\0\5\30\2\0\4\30"+
    "\1\0\1\30\15\0\17\30\1\321\13\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\23\30\1\322\7\30"+
    "\2\0\3\30\1\322\1\30\2\0\4\30\1\0\1\30"+
    "\15\0\3\30\1\323\27\30\2\0\5\30\2\0\4\30"+
    "\1\0\1\30\15\0\30\30\1\32\2\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\5\30\1\145\25\30"+
    "\2\0\5\30\2\0\4\30\1\0\1\30\15\0\7\30"+
    "\1\306\23\30\2\0\5\30\2\0\4\30\1\0\1\30"+
    "\15\0\7\30\1\222\23\30\2\0\5\30\2\0\4\30"+
    "\1\0\1\30\15\0\11\30\1\324\21\30\2\0\5\30"+
    "\2\0\4\30\1\0\1\30\15\0\22\30\1\325\10\30"+
    "\2\0\5\30\2\0\4\30\1\0\1\30\15\0\11\30"+
    "\1\326\21\30\2\0\5\30\2\0\4\30\1\0\1\30"+
    "\15\0\7\30\1\327\23\30\2\0\5\30\2\0\4\30"+
    "\1\0\1\30\15\0\1\30";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9020];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\4\1\1\11\1\1\1\11\37\1\2\11"+
    "\1\1\1\11\2\1\1\11\1\1\3\11\1\1\5\11"+
    "\2\1\1\11\3\1\1\11\35\1\2\0\4\1\1\0"+
    "\1\1\4\0\31\1\3\11\3\1\1\0\25\1\2\11"+
    "\4\1\2\0\1\11\1\0\31\1\2\11\2\1\1\11"+
    "\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int fmtLevel = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Xga99Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 59: break;
          case 2: 
            { return Xga99Types.IDENT;
            } 
            // fall through
          case 60: break;
          case 3: 
            { return Xga99Types.LCOMMENT;
            } 
            // fall through
          case 61: break;
          case 4: 
            { yybegin(YYINITIAL); return Xga99Types.CRLF;
            } 
            // fall through
          case 62: break;
          case 5: 
            { return Xga99Types.COMMENT;
            } 
            // fall through
          case 63: break;
          case 6: 
            { return Xga99Types.OP_COLON;
            } 
            // fall through
          case 64: break;
          case 7: 
            { if (fmtLevel > 0) yybegin(FMNEMONIC); else yybegin(MNEMONIC);
                         return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 65: break;
          case 8: 
            { yybegin(COMMENT); return Xga99Types.UNKNOWN;
            } 
            // fall through
          case 66: break;
          case 9: 
            { yybegin(MNEMONICO); return Xga99Types.INSTR_V;
            } 
            // fall through
          case 67: break;
          case 10: 
            { return Xga99Types.INSTR_III;
            } 
            // fall through
          case 68: break;
          case 11: 
            { yybegin(ARGUMENTS); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 69: break;
          case 12: 
            { yybegin(COMMENT); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 70: break;
          case 13: 
            { return Xga99Types.OP_MISC;
            } 
            // fall through
          case 71: break;
          case 14: 
            { return Xga99Types.OP_PLUS;
            } 
            // fall through
          case 72: break;
          case 15: 
            { return Xga99Types.INT;
            } 
            // fall through
          case 73: break;
          case 16: 
            { return Xga99Types.OP_AST;
            } 
            // fall through
          case 74: break;
          case 17: 
            { return Xga99Types.OP_SEP;
            } 
            // fall through
          case 75: break;
          case 18: 
            { return Xga99Types.OP_RPAREN;
            } 
            // fall through
          case 76: break;
          case 19: 
            { yybegin(TLIT); return Xga99Types.OP_QUOTE;
            } 
            // fall through
          case 77: break;
          case 20: 
            { yybegin(FLIT); return Xga99Types.OP_FQUOTE;
            } 
            // fall through
          case 78: break;
          case 21: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 79: break;
          case 22: 
            { return Xga99Types.OP_AT;
            } 
            // fall through
          case 80: break;
          case 23: 
            { return Xga99Types.OP_MINUS;
            } 
            // fall through
          case 81: break;
          case 24: 
            { return Xga99Types.OP_NOT;
            } 
            // fall through
          case 82: break;
          case 25: 
            { return Xga99Types.OP_LPAREN;
            } 
            // fall through
          case 83: break;
          case 26: 
            { return Xga99Types.OP_LC;
            } 
            // fall through
          case 84: break;
          case 27: 
            { yybegin(YYINITIAL); return Xga99Types.COMMENT;
            } 
            // fall through
          case 85: break;
          case 28: 
            { return Xga99Types.PP_ARG;
            } 
            // fall through
          case 86: break;
          case 29: 
            { return Xga99Types.PP_SEP;
            } 
            // fall through
          case 87: break;
          case 30: 
            { return Xga99Types.TEXT;
            } 
            // fall through
          case 88: break;
          case 31: 
            { yybegin(ARGUMENTS); return Xga99Types.OP_QUOTE;
            } 
            // fall through
          case 89: break;
          case 32: 
            { return Xga99Types.FNAME;
            } 
            // fall through
          case 90: break;
          case 33: 
            { yybegin(ARGUMENTS); return Xga99Types.OP_FQUOTE;
            } 
            // fall through
          case 91: break;
          case 34: 
            { return Xga99Types.INSTR_I;
            } 
            // fall through
          case 92: break;
          case 35: 
            { return Xga99Types.INSTR_VI;
            } 
            // fall through
          case 93: break;
          case 36: 
            { yybegin(PREPROC); return Xga99Types.PREP;
            } 
            // fall through
          case 94: break;
          case 37: 
            { return Xga99Types.GADDR;
            } 
            // fall through
          case 95: break;
          case 38: 
            { return Xga99Types.VINDR;
            } 
            // fall through
          case 96: break;
          case 39: 
            { return Xga99Types.VADDR;
            } 
            // fall through
          case 97: break;
          case 40: 
            { return Xga99Types.PP_PARAM;
            } 
            // fall through
          case 98: break;
          case 41: 
            { return Xga99Types.INSTR_II;
            } 
            // fall through
          case 99: break;
          case 42: 
            { return Xga99Types.DIR_L;
            } 
            // fall through
          case 100: break;
          case 43: 
            { return Xga99Types.DIR_S;
            } 
            // fall through
          case 101: break;
          case 44: 
            { return Xga99Types.INSTR_VIII;
            } 
            // fall through
          case 102: break;
          case 45: 
            { fmtLevel = 1; yybegin(MNEMONICO); return Xga99Types.INSTR_X;
            } 
            // fall through
          case 103: break;
          case 46: 
            { return Xga99Types.INSTR_F_I;
            } 
            // fall through
          case 104: break;
          case 47: 
            { fmtLevel += 1; return Xga99Types.INSTR_F_V;
            } 
            // fall through
          case 105: break;
          case 48: 
            { return Xga99Types.DIR_M;
            } 
            // fall through
          case 106: break;
          case 49: 
            { return Xga99Types.DIR_C;
            } 
            // fall through
          case 107: break;
          case 50: 
            { return Xga99Types.DIR_T;
            } 
            // fall through
          case 108: break;
          case 51: 
            { return Xga99Types.INSTR_IX;
            } 
            // fall through
          case 109: break;
          case 52: 
            { return Xga99Types.INSTR_VII;
            } 
            // fall through
          case 110: break;
          case 53: 
            { return Xga99Types.INSTR_F_II;
            } 
            // fall through
          case 111: break;
          case 54: 
            { fmtLevel -= 1; return Xga99Types.INSTR_F_X;
            } 
            // fall through
          case 112: break;
          case 55: 
            { return Xga99Types.DIR_F;
            } 
            // fall through
          case 113: break;
          case 56: 
            { return Xga99Types.INSTR_F_III;
            } 
            // fall through
          case 114: break;
          case 57: 
            { return Xga99Types.INSTR_F_IV;
            } 
            // fall through
          case 115: break;
          case 58: 
            { return Xga99Types.INSTR_F_IX;
            } 
            // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
