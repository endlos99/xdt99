{
    parserClass="net.endlos.xdt99.xas99r.parser.Xas99RParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Xas99R"
    psiImplClassSuffix="Impl"
    psiPackage="net.endlos.xdt99.xas99r.psi"
    psiImplPackage="net.endlos.xdt99.xas99r.psi.impl"

    elementTypeHolderClass="net.endlos.xdt99.xas99r.psi.Xas99RTypes"
    elementTypeClass="net.endlos.xdt99.xas99r.psi.Xas99RElementType"
    tokenTypeClass="net.endlos.xdt99.xas99r.psi.Xas99RTokenType"

    psiImplUtilClass="net.endlos.xdt99.xas99r.psi.impl.Xas99RPsiImplUtil"
}

xas99File ::=
    (line CRLF)*
private line ::=
    linecomment | label? statement? pragma?

linecomment ::=  // used by folding builder
    LCOMMENT
    {pin=1}

// label
private label ::=
    labeldef OP_COLON?
labeldef ::=
    IDENT
    {mixin="net.endlos.xdt99.xas99r.psi.impl.Xas99RNamedElementImpl"
     implements="net.endlos.xdt99.xas99r.psi.Xas99RNamedElement"
     methods=[getName setName getNameIdentifier getPresentation]}

    // NOTE: It's not possible to define an "aliasdef", as any IDENT token would be parsed by the first
    //       clause matching in rule "line", even if the next token won't.

// mnemonics
private statement ::=
    directive | instruction | preprocessor | alias_definition
    {recoverWhile="statement_recover"}
private statement_recover ::=
    !CRLF
directive ::=
    DIR_L args_dir_L |
    DIR_E args_dir_E |
    DIR_EO args_dir_EO |
    DIR_ES args_dir_ES |
    DIR_EV args_dir_EV |
    DIR_R args_dir_E |
    DIR_T args_dir_T |
    DIR_S args_dir_S |
    DIR_C args_dir_C |
    DIR_O |
    DIR_X |
    DIR_F args_dir_F |
    DIR_R args_dir_R
    {pin=1}
instruction ::=
    INSTR_I args_I |
    INSTR_II args_II |
    INSTR_III args_III |
    INSTR_IV args_IV |
    INSTR_V args_V |
    INSTR_VI args_VI |
    INSTR_VII |
    INSTR_VIII args_VIII |
    INSTR_VIII_I args_VIII_I |
    INSTR_VIII_R args_VIII_R |
    INSTR_IX args_IX |
    INSTR_IX_X args_IX_X |
    INSTR_O |
    INSTR_9995_VI args_VI |
    INSTR_9995_VIII args_VIII_R |
    INSTR_99000_I args_adv_I |
    INSTR_99000_IV args_adv_IV |
    INSTR_99000_VI args_adv_VI |
    INSTR_99000_VIII args_adv_VIII |
    INSTR_F18A_IA args_adv_Ia |
    INSTR_F18A_VI args_adv_VI |
    INSTR_F18A_O
    {pin=1}
preprocessor ::=
    PREP (PP_ARG | PP_SEP)*
    {pin=1}
alias_definition ::=
    DIR_RA args_dir_E
    {pin=1}

// arguments
args_dir_L ::=
    (opLabel (OP_SEP opLabel)*)?
args_dir_E ::=
    expr
args_dir_EO ::=
    expr?
args_dir_ES ::=
    expr (OP_SEP expr)*
args_dir_EV ::=
    expr OP_SEP expr? |
    OP_SEP expr
args_dir_T ::=
    opText (OP_SEP opText)*
args_dir_S ::=
    opText
args_dir_C ::=
    opFilename
args_dir_F ::=
    opFloat
args_dir_R ::=
    labeldef (OP_SEP labeldef)*  // for REF
args_I ::=
    opGA OP_SEP opGA
    {pin="OP_SEP"}
args_II ::=
    expr
args_III ::=
    opGA OP_SEP opRegister
    {pin="OP_SEP"}
args_IV ::=
    opGA OP_SEP opValue
    {pin="OP_SEP"}
args_V ::=
    opRegister OP_SEP (opValue | REGISTER0)  // special rule for PeteE
    {pin="OP_SEP"}
args_VI ::=
    opGA
args_VIII ::=
    opRegister OP_SEP opValue
    {pin="OP_SEP"}
args_VIII_I ::=
    opValue
args_VIII_R ::=
    opRegister
args_IX ::=
    opGA OP_SEP opRegister
    {pin="OP_SEP"}
args_IX_X ::=
    opGA OP_SEP opValue
    {pin="OP_SEP"}
args_adv_Ia ::=
    opGA OP_SEP (opGA | opValue)
    {pin="OP_SEP"}
args_adv_I ::=
    args_I
args_adv_IV ::=
    args_IV
args_adv_VI ::=
    args_VI
args_adv_VIII ::=
    args_VIII

// pragma
pragma ::=
    PG_START pragmaClause (PG_SEP pragmaClause)*
private pragmaClause ::=
    PG_TERM PG_EQ PG_TERM | PG_CYC+

// arguments
private opGA ::=
    OP_AT OP_MINUS? sexpr (OP_LPAREN opRegister OP_RPAREN)? |
    opRegister |
    OP_AST opRegister OP_PLUS? |
    MOD_AUTO opValue
    {name="general address"}
private opAddress ::=
    MOD_XBANK? opLabel | OP_LC | LOCAL | PP_PARAM
    {name="address value"}
private opValue ::=
    expr
    {name="value"}
opRegister ::=
    REGISTER | REGISTER0 | INT | PP_PARAM | opAlias
    {name="register"}
opText ::=
    OP_MINUS? (OP_QUOTE TEXT? OP_QUOTE | INT | PP_PARAM)
    {name="text"}
opFilename ::=
    OP_FQUOTE FNAME OP_FQUOTE
opLabel ::=
    IDENT | PP_PARAM
    {methods=[getName setName getNameIdentifier getReference]
     name="label"}
opAlias ::=
    IDENT
    {methods=[getName setName getNameIdentifier getReference]
     name="alias"}
opFloat ::=
    (OP_PLUS | OP_MINUS)? DIGIT* ("." DIGIT*)?

// expressions
private expr ::=
    (OP_PLUS | OP_MINUS | OP_NOT) expr |
    term (xop expr)*
    {name="expression"}
// simple expression: no parentheses
private sexpr ::=
    (OP_PLUS | OP_MINUS | OP_NOT) sexpr |
    atom (xop sexpr)*
    {name="simple expressions"}
private term ::=
    OP_LPAREN expr OP_RPAREN |
    atom
    {name="term"}
private xop ::=
    OP_PLUS | OP_MINUS | OP_AST | OP_MISC
    {name="operator"}
private atom ::=
    opAddress | INT | OP_QUOTE TEXT? OP_QUOTE | MOD_LEN opLabel
    {name="value"}

dummy ::=
    COMMENT  // keep this!
