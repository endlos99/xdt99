/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package net.endlos.xdt99.xas99;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import net.endlos.xdt99.xas99.psi.Xas99Types;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Xas99.flex</tt>
 */
class Xas99Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MNEMONIC = 2;
  public static final int MNEMONICO = 4;
  public static final int ARGUMENTS = 6;
  public static final int COMMENT = 8;
  public static final int PREPROC = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\77\1\1\3\275\1");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\62\1\63\2\0\1\41\22\0\1\61\1\43\1\51\1\56\1\57\1\54\1\60\1\50\1\70"+
    "\1\71\1\40\1\65\1\55\1\66\1\33\1\60\1\47\1\52\4\53\4\34\1\46\1\42\2\0\1\45"+
    "\1\0\1\64\1\1\1\2\1\3\1\24\1\12\1\30\1\14\1\16\1\36\1\11\1\37\1\17\1\4\1\21"+
    "\1\5\1\20\1\13\1\23\1\35\1\15\1\32\1\6\1\25\1\22\1\31\1\10\3\0\1\60\1\44\1"+
    "\0\1\1\1\2\1\3\1\24\1\12\1\30\1\14\1\16\1\36\1\11\1\37\1\17\1\4\1\21\1\5\1"+
    "\20\1\13\1\23\1\35\1\15\1\32\1\6\1\25\1\22\1\31\1\10\1\0\1\60\1\0\1\67\261"+
    "\0\2\26\115\0\1\7\52\0\1\27\125\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\5\1\2\1\6"+
    "\1\7\1\4\1\10\1\11\1\10\3\12\1\10\6\12"+
    "\1\11\2\12\1\1\2\12\1\1\1\10\2\12\1\13"+
    "\1\14\1\2\1\15\1\16\4\1\1\17\1\20\1\1"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\10\1\34\2\12\1\35\2\12"+
    "\1\11\3\12\1\10\11\12\1\0\1\10\1\34\6\0"+
    "\4\12\2\36\4\12\1\36\11\12\1\35\12\12\1\37"+
    "\5\12\2\0\2\12\1\40\1\12\1\10\10\12\2\41"+
    "\2\15\1\0\1\42\1\0\1\42\1\43\1\11\2\12"+
    "\1\44\5\12\1\45\4\12\1\10\1\46\1\0\1\36"+
    "\1\10\5\0\1\47\1\50\1\47\2\0\1\12\1\51"+
    "\1\52\2\12\1\53\2\12\1\53\3\12\1\54\1\50"+
    "\1\12\1\37\1\55\1\45\2\12\1\56\3\12\1\11"+
    "\1\12\2\11\1\57\1\0\1\12\1\60\4\12\2\47"+
    "\2\12\1\57\1\12\1\61\1\62\1\63\1\64\1\61"+
    "\1\10\1\65\1\66\1\52\1\63\1\65\1\67\1\70"+
    "\1\64\1\71\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u015c\0\u02b8\0\u015c\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692"+
    "\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862"+
    "\0\u089c\0\u08d6\0\u015c\0\u0910\0\u094a\0\u0984\0\u09be\0\u015c"+
    "\0\u015c\0\u09f8\0\u015c\0\u0862\0\u015c\0\u015c\0\u015c\0\u015c"+
    "\0\u015c\0\u015c\0\u0a32\0\u0a6c\0\u015c\0\u0aa6\0\u0414\0\u0ae0"+
    "\0\u0b1a\0\u0414\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76"+
    "\0\u0414\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c"+
    "\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u015c\0\u0f2e\0\u0f68\0\u0fa2"+
    "\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172"+
    "\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u0414\0\u12ce\0\u1308"+
    "\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8"+
    "\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8"+
    "\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878"+
    "\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u0740\0\u199a\0\u19d4\0\u1a0e"+
    "\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u0196"+
    "\0\u1bde\0\u0910\0\u094a\0\u0984\0\u1c18\0\u09be\0\u015c\0\u09f8"+
    "\0\u0414\0\u1c52\0\u1c8c\0\u0414\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74"+
    "\0\u1dae\0\u0414\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a"+
    "\0\u1f44\0\u015c\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0"+
    "\0\u20da\0\u015c\0\u015c\0\u2114\0\u214e\0\u2188\0\u0414\0\u0414"+
    "\0\u21c2\0\u21fc\0\u0414\0\u2236\0\u2270\0\u22aa\0\u22aa\0\u22e4"+
    "\0\u231e\0\u0414\0\u0414\0\u2358\0\u0414\0\u0414\0\u2392\0\u23cc"+
    "\0\u2406\0\u0414\0\u2440\0\u247a\0\u2392\0\u24b4\0\u24ee\0\u2528"+
    "\0\u015c\0\u015c\0\u2562\0\u259c\0\u0414\0\u25d6\0\u2610\0\u264a"+
    "\0\u2684\0\u26be\0\u0414\0\u26f8\0\u2732\0\u0414\0\u276c\0\u0414"+
    "\0\u0414\0\u0414\0\u0414\0\u015c\0\u015c\0\u015c\0\u015c\0\u015c"+
    "\0\u015c\0\u0414\0\u0414\0\u0414\0\u015c\0\u0414\0\u0414";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\6\10\1\7\16\10\2\7\3\10\2\7\3\10"+
    "\1\11\1\12\1\13\1\14\1\10\1\7\1\15\12\7"+
    "\2\16\1\17\7\7\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\25\1\27\1\30\2\25\1\31\1\25"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\25\1\40"+
    "\1\7\1\41\1\25\1\42\1\43\1\7\1\44\1\45"+
    "\1\25\1\7\1\12\1\13\1\46\1\25\14\7\2\47"+
    "\1\17\47\7\1\12\1\13\16\7\2\50\1\17\7\7"+
    "\6\10\1\7\13\10\1\51\2\10\2\7\3\10\1\7"+
    "\1\52\3\10\1\53\1\12\1\13\1\14\1\10\1\54"+
    "\1\55\1\52\1\56\1\57\2\52\1\60\1\61\1\62"+
    "\1\63\1\60\1\64\1\50\1\17\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\41\73\1\12\1\13\20\73\1\17"+
    "\6\73\41\74\1\12\1\13\12\74\1\75\3\74\1\64"+
    "\1\50\1\17\6\74\72\0\40\10\4\0\1\10\2\0"+
    "\6\10\1\0\1\10\13\0\41\11\1\0\21\11\1\0"+
    "\6\11\63\0\1\17\6\0\41\13\1\0\21\13\1\0"+
    "\6\13\40\10\3\0\1\14\1\10\2\0\6\10\1\0"+
    "\1\10\74\0\2\16\7\0\2\25\1\76\1\25\1\77"+
    "\1\100\13\25\1\101\4\25\1\102\7\25\1\102\1\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\3\25"+
    "\1\103\3\25\1\104\2\25\1\104\4\25\1\105\6\25"+
    "\1\106\2\25\1\107\3\25\1\104\1\106\1\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\13\0\1\25\1\110"+
    "\1\111\2\25\1\112\1\25\1\113\1\114\1\25\1\115"+
    "\4\25\1\116\6\25\1\102\1\117\5\25\1\113\1\102"+
    "\1\117\4\0\1\25\2\0\6\25\1\0\1\25\13\0"+
    "\5\25\1\120\12\25\1\121\17\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\23\25\1\122\14\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\13\0\40\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\14\0\1\123\1\124"+
    "\1\0\1\125\1\126\2\0\1\126\1\0\1\127\2\0"+
    "\1\130\1\0\1\131\3\0\1\132\1\0\1\133\44\0"+
    "\4\25\1\134\1\135\4\25\1\136\1\25\1\137\1\25"+
    "\1\140\1\141\1\25\1\142\16\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\6\25\1\143\4\25\1\144"+
    "\5\25\1\145\16\25\4\0\1\25\2\0\6\25\1\0"+
    "\1\25\13\0\2\25\1\146\1\147\1\150\2\25\1\147"+
    "\2\25\1\151\13\25\1\152\6\25\1\147\1\152\1\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\5\25"+
    "\1\153\1\25\1\154\13\25\1\155\1\156\1\157\1\160"+
    "\6\25\1\154\1\160\1\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\1\25\1\161\3\25\1\162\1\25"+
    "\1\113\2\25\1\115\13\25\1\163\3\25\1\164\2\25"+
    "\1\113\1\163\1\25\4\0\1\25\2\0\6\25\1\0"+
    "\1\25\13\0\5\25\1\165\4\25\1\166\25\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\13\0\5\25\1\167"+
    "\32\25\4\0\1\25\2\0\6\25\1\0\1\25\13\0"+
    "\5\25\1\170\1\25\1\171\2\25\1\172\2\25\1\173"+
    "\17\25\1\171\2\25\4\0\1\25\2\0\6\25\1\0"+
    "\1\25\13\0\1\25\1\174\3\25\1\175\1\25\1\113"+
    "\2\25\1\176\7\25\1\177\3\25\1\200\6\25\1\113"+
    "\1\200\1\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\34\0\1\201\2\0\1\202\45\0\17\25\1\203\20\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\21\25"+
    "\1\204\16\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\14\0\6\205\1\0\16\205\2\0\3\205\1\0\4\205"+
    "\7\0\1\205\2\0\2\205\16\0\1\25\1\206\1\207"+
    "\1\25\1\77\1\210\2\25\1\210\1\25\1\211\2\25"+
    "\1\212\1\25\1\213\3\25\1\214\1\25\1\215\12\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\21\25"+
    "\1\216\2\25\1\217\13\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\40\25\3\0\1\46\1\25\2\0"+
    "\6\25\1\0\1\25\74\0\2\47\70\0\2\50\7\0"+
    "\34\10\1\220\3\10\4\0\1\10\2\0\1\220\2\10"+
    "\1\221\1\220\1\10\1\0\1\10\47\0\1\52\12\0"+
    "\1\52\2\0\2\52\17\0\3\222\6\0\1\222\11\0"+
    "\1\222\3\0\1\222\3\0\1\222\12\0\1\222\2\0"+
    "\2\222\65\0\1\223\2\0\1\223\17\0\41\224\1\0"+
    "\6\224\1\225\12\224\1\0\6\224\41\226\1\0\7\226"+
    "\1\227\11\226\1\0\6\226\34\0\1\230\12\0\1\230"+
    "\2\0\2\230\16\0\41\73\1\0\21\73\1\0\6\73"+
    "\41\74\1\0\13\74\1\0\3\74\3\0\6\74\7\25"+
    "\1\231\25\25\1\231\2\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\23\25\1\232\14\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\24\25\1\122\13\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\5\25"+
    "\1\233\32\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\7\25\1\234\25\25\1\234\2\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\7\25\1\235\15\25"+
    "\1\236\7\25\1\235\2\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\21\25\1\237\16\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\15\25\1\240\22\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\17\25"+
    "\1\241\20\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\3\25\1\242\14\25\1\243\17\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\12\25\1\244\25\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\3\25"+
    "\1\242\34\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\21\25\1\245\16\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\23\25\1\231\14\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\5\25\1\246\32\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\6\25"+
    "\1\247\31\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\31\25\1\250\6\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\26\25\1\102\7\25\1\102\1\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\21\0\1\251"+
    "\70\0\1\252\2\0\1\252\64\0\1\253\103\0\1\254"+
    "\57\0\1\255\3\0\1\256\13\0\1\257\1\0\1\260"+
    "\7\0\1\256\35\0\1\261\1\0\1\262\67\0\1\261"+
    "\1\0\1\263\6\0\1\264\4\0\1\263\72\0\1\265"+
    "\51\0\20\25\1\146\17\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\3\25\1\146\14\25\1\146\17\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\13\25"+
    "\1\146\24\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\15\25\1\146\22\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\12\25\1\146\25\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\12\25\1\146\2\25"+
    "\1\146\22\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\3\25\1\146\1\25\1\146\4\25\1\146\25\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\12\25"+
    "\1\266\25\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\32\25\1\234\5\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\24\25\1\267\13\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\4\25\1\150\33\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\2\25"+
    "\1\270\35\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\22\25\1\271\15\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\15\25\1\272\22\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\1\25\1\245\36\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\15\25"+
    "\1\273\22\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\12\25\1\274\25\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\3\25\1\275\34\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\20\25\1\276\17\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\4\25"+
    "\1\277\2\25\1\300\25\25\1\300\2\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\14\25\1\301\23\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\20\25"+
    "\1\302\17\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\22\25\1\303\15\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\7\25\1\304\25\25\1\304\2\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\20\25"+
    "\1\305\17\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\14\25\1\231\23\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\20\25\1\306\2\25\1\307\14\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\23\25"+
    "\1\310\14\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\12\25\1\311\25\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\15\25\1\312\12\25\1\267\7\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\25\25"+
    "\1\313\12\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\15\25\1\314\22\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\23\25\1\315\14\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\3\25\1\316\15\25"+
    "\1\245\6\25\1\267\7\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\5\25\1\317\32\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\6\25\1\250\31\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\16\0\1\320"+
    "\2\0\1\321\100\0\1\322\1\0\1\323\52\0\5\25"+
    "\1\324\32\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\17\25\1\325\20\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\6\25\1\240\31\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\5\25\1\146\2\25"+
    "\1\146\27\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\3\25\1\247\34\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\15\25\1\326\22\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\3\25\1\275\3\25"+
    "\1\327\13\25\1\330\1\25\1\331\7\25\1\327\2\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\1\25"+
    "\1\332\1\25\1\303\34\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\1\25\1\332\1\25\1\333\6\25"+
    "\1\334\4\25\1\333\20\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\20\25\1\335\17\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\3\25\1\316\2\25"+
    "\1\231\31\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\15\25\1\336\1\25\1\337\20\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\40\10\4\0\1\10"+
    "\2\0\1\220\2\10\2\220\1\10\1\0\1\10\63\0"+
    "\1\224\21\0\14\25\1\340\23\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\20\25\1\243\17\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\13\0\27\25\1\273"+
    "\7\25\1\273\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\20\25\1\231\17\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\24\25\1\341\13\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\12\25\1\340\25\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\17\25"+
    "\1\302\20\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\31\25\1\336\6\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\14\25\1\342\23\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\24\25\1\342\13\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\21\25"+
    "\1\343\6\25\1\343\7\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\2\25\1\111\35\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\7\25\1\341\25\25"+
    "\1\341\2\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\25\0\1\344\61\0\1\345\74\0\1\321\107\0\1\346"+
    "\63\0\1\347\102\0\1\322\7\0\1\322\53\0\1\347"+
    "\55\0\1\350\115\0\1\351\43\0\1\321\67\0\21\25"+
    "\1\325\16\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\15\25\1\336\22\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\17\25\1\336\20\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\22\25\1\343\15\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\23\25"+
    "\1\352\14\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\26\25\1\353\7\25\1\353\1\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\15\25\1\325\22\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\12\25"+
    "\1\325\25\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\16\25\1\302\21\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\14\25\1\234\23\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\14\25\1\354\23\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\15\25"+
    "\1\343\22\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\20\25\1\343\17\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\1\25\1\340\36\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\15\25\1\231\22\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\20\25"+
    "\1\325\17\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\30\0\1\321\66\0\1\355\57\0\1\25\1\356\36\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\5\25"+
    "\1\231\32\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\15\25\1\357\22\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\26\25\1\336\7\25\1\336\1\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\20\25"+
    "\1\357\17\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\4\25\1\270\33\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\30\25\1\342\7\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\2\25\1\231\35\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\12\25"+
    "\1\343\25\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10150];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\5\1\1\11\1\1\1\11\33\1\1\11"+
    "\4\1\2\11\1\1\1\11\1\1\6\11\2\1\1\11"+
    "\25\1\1\0\1\1\1\11\6\0\45\1\2\0\21\1"+
    "\1\0\1\1\1\0\1\11\21\1\1\0\1\11\1\1"+
    "\5\0\1\1\2\11\2\0\33\1\2\11\1\0\20\1"+
    "\6\11\3\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Xas99Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 58: break;
          case 2: 
            { return Xas99Types.IDENT;
            } 
            // fall through
          case 59: break;
          case 3: 
            { return Xas99Types.LCOMMENT;
            } 
            // fall through
          case 60: break;
          case 4: 
            { yybegin(YYINITIAL); return Xas99Types.CRLF;
            } 
            // fall through
          case 61: break;
          case 5: 
            { return Xas99Types.COMMENT;
            } 
            // fall through
          case 62: break;
          case 6: 
            { return Xas99Types.OP_COLON;
            } 
            // fall through
          case 63: break;
          case 7: 
            { yybegin(MNEMONIC); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 64: break;
          case 8: 
            { return Xas99Types.INSTR_I;
            } 
            // fall through
          case 65: break;
          case 9: 
            { return Xas99Types.INSTR_VI;
            } 
            // fall through
          case 66: break;
          case 10: 
            { yybegin(COMMENT); return Xas99Types.UNKNOWN;
            } 
            // fall through
          case 67: break;
          case 11: 
            { yybegin(ARGUMENTS); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 68: break;
          case 12: 
            { yybegin(COMMENT); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 69: break;
          case 13: 
            { return Xas99Types.INT;
            } 
            // fall through
          case 70: break;
          case 14: 
            { return Xas99Types.OP_AST;
            } 
            // fall through
          case 71: break;
          case 15: 
            { return Xas99Types.OP_MISC;
            } 
            // fall through
          case 72: break;
          case 16: 
            { return Xas99Types.OP_SEP;
            } 
            // fall through
          case 73: break;
          case 17: 
            { return Xas99Types.OP_LC;
            } 
            // fall through
          case 74: break;
          case 18: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 75: break;
          case 19: 
            { return Xas99Types.OP_AT;
            } 
            // fall through
          case 76: break;
          case 20: 
            { return Xas99Types.OP_PLUS;
            } 
            // fall through
          case 77: break;
          case 21: 
            { return Xas99Types.OP_MINUS;
            } 
            // fall through
          case 78: break;
          case 22: 
            { return Xas99Types.OP_NOT;
            } 
            // fall through
          case 79: break;
          case 23: 
            { return Xas99Types.OP_LPAREN;
            } 
            // fall through
          case 80: break;
          case 24: 
            { return Xas99Types.OP_RPAREN;
            } 
            // fall through
          case 81: break;
          case 25: 
            { yybegin(YYINITIAL); return Xas99Types.COMMENT;
            } 
            // fall through
          case 82: break;
          case 26: 
            { return Xas99Types.PP_ARG;
            } 
            // fall through
          case 83: break;
          case 27: 
            { return Xas99Types.PP_SEP;
            } 
            // fall through
          case 84: break;
          case 28: 
            { return Xas99Types.INSTR_9995_I;
            } 
            // fall through
          case 85: break;
          case 29: 
            { return Xas99Types.INSTR_VIII;
            } 
            // fall through
          case 86: break;
          case 30: 
            { return Xas99Types.INSTR_II;
            } 
            // fall through
          case 87: break;
          case 31: 
            { yybegin(MNEMONICO); return Xas99Types.INSTR_O;
            } 
            // fall through
          case 88: break;
          case 32: 
            { yybegin(PREPROC); return Xas99Types.PREP;
            } 
            // fall through
          case 89: break;
          case 33: 
            { return Xas99Types.REGISTER;
            } 
            // fall through
          case 90: break;
          case 34: 
            { return Xas99Types.TEXT;
            } 
            // fall through
          case 91: break;
          case 35: 
            { return Xas99Types.PP_PARAM;
            } 
            // fall through
          case 92: break;
          case 36: 
            { return Xas99Types.DIR_E;
            } 
            // fall through
          case 93: break;
          case 37: 
            { return Xas99Types.INSTR_III;
            } 
            // fall through
          case 94: break;
          case 38: 
            { return Xas99Types.INSTR_IX;
            } 
            // fall through
          case 95: break;
          case 39: 
            { return Xas99Types.INSTR_V;
            } 
            // fall through
          case 96: break;
          case 40: 
            { return Xas99Types.INSTR_F18A_IA;
            } 
            // fall through
          case 97: break;
          case 41: 
            { return Xas99Types.DIR_L;
            } 
            // fall through
          case 98: break;
          case 42: 
            { return Xas99Types.INSTR_9995_IV;
            } 
            // fall through
          case 99: break;
          case 43: 
            { return Xas99Types.INSTR_9995_VIII;
            } 
            // fall through
          case 100: break;
          case 44: 
            { return Xas99Types.INSTR_F18A_VI;
            } 
            // fall through
          case 101: break;
          case 45: 
            { return Xas99Types.INSTR_IX_X;
            } 
            // fall through
          case 102: break;
          case 46: 
            { yybegin(MNEMONICO); return Xas99Types.INSTR_F18A_O;
            } 
            // fall through
          case 103: break;
          case 47: 
            { return Xas99Types.DIR_S;
            } 
            // fall through
          case 104: break;
          case 48: 
            { yybegin(MNEMONICO); return Xas99Types.DIR_O;
            } 
            // fall through
          case 105: break;
          case 49: 
            { return Xas99Types.DIR_ES;
            } 
            // fall through
          case 106: break;
          case 50: 
            { return Xas99Types.INSTR_9995_VI;
            } 
            // fall through
          case 107: break;
          case 51: 
            { yybegin(MNEMONICO); return Xas99Types.DIR_X;
            } 
            // fall through
          case 108: break;
          case 52: 
            { yybegin(MNEMONICO); return Xas99Types.INSTR_VII;
            } 
            // fall through
          case 109: break;
          case 53: 
            { return Xas99Types.INSTR_IV;
            } 
            // fall through
          case 110: break;
          case 54: 
            { return Xas99Types.INSTR_VIII_R;
            } 
            // fall through
          case 111: break;
          case 55: 
            { return Xas99Types.INSTR_VIII_I;
            } 
            // fall through
          case 112: break;
          case 56: 
            { return Xas99Types.DIR_EO;
            } 
            // fall through
          case 113: break;
          case 57: 
            { return Xas99Types.DIR_F;
            } 
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
