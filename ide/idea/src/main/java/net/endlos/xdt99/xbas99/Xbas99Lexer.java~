/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package net.endlos.xdt99.xbas99;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import net.endlos.xdt99.xbas99.psi.Xbas99Types;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Xbas99.flex</tt>
 */
class Xbas99Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STMT = 2;
  public static final int DATA = 4;
  public static final int IMAGE = 6;
  public static final int REM = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\77\1\1\3\275\1");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\35\1\36\2\0\1\30\22\0\1\35\1\64\1\27\1\54\1\46\1\0\1\57\1\0\1\55\1"+
    "\56\1\60\1\62\1\37\1\25\1\26\1\61\12\34\1\47\1\50\1\52\1\51\1\53\1\0\1\31"+
    "\1\1\1\2\1\4\1\24\1\10\1\11\1\16\1\23\1\33\1\31\1\41\1\15\1\17\1\6\1\7\1\13"+
    "\1\21\1\20\1\32\1\5\1\43\1\22\1\45\1\12\1\42\1\44\3\31\1\63\1\31\1\0\1\1\1"+
    "\2\1\4\1\24\1\10\1\11\1\16\1\23\1\33\1\31\1\41\1\15\1\17\1\6\1\7\1\13\1\21"+
    "\1\20\1\32\1\5\1\43\1\22\1\45\1\12\1\42\1\44\265\0\2\14\115\0\1\3\52\0\1\40"+
    "\125\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\5\2\10\1\4\10\10\1\4\7\10\1\11\1\12"+
    "\1\4\2\10\1\13\1\14\2\10\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\3\1\1\1\7\1\2\2\7\1\10"+
    "\1\0\1\10\1\32\4\10\1\33\3\10\6\0\4\10"+
    "\1\34\5\10\1\35\1\10\1\36\7\10\1\0\3\10"+
    "\1\37\1\10\1\37\1\0\1\40\1\0\2\10\1\0"+
    "\1\10\1\41\12\10\1\0\1\10\2\0\1\42\6\10"+
    "\1\40\2\10\1\0\4\10\1\43\2\44\1\10\1\45"+
    "\1\10\1\46\1\0\3\10\5\0\1\47\5\10\1\50"+
    "\5\10\1\51\1\0\3\10\1\52\1\0\1\10\1\53"+
    "\1\10\1\0\1\10\1\44\2\0\1\54\1\0\1\10"+
    "\1\0\4\10\1\0\2\10\1\55\1\10\1\56\1\44"+
    "\2\10\1\57\1\10\2\0\1\60\1\10\1\60\1\10"+
    "\1\0\1\12\4\10\1\47\1\44\3\10\1\0\7\10"+
    "\2\61\1\62\1\10\1\63\1\64\1\65\1\0\1\66"+
    "\1\0\1\67\1\0\2\10\1\70\1\71\1\10\1\0"+
    "\1\10\1\72\1\10\2\73\1\0\2\10\1\0\2\10"+
    "\1\0\1\10\4\0\1\10\1\0\1\74\2\10\1\75"+
    "\1\0\3\10\1\0\1\10\1\0\1\10\1\76\1\10"+
    "\2\0\2\10\1\63\1\64\1\10\1\66\5\10\1\0"+
    "\7\10\2\77\3\0\2\100\1\101\1\10\1\0\2\10"+
    "\2\102\1\103\2\104\1\10\2\105\1\0\1\106\1\107"+
    "\1\0\1\10\2\110\1\10\1\0\3\10\1\0\1\10"+
    "\1\0\2\10\1\0\2\111\5\10\1\106\1\107\1\10"+
    "\1\112\3\10\1\112\1\0\1\10\1\113\1\114\1\0"+
    "\1\115\2\0\1\10\2\116\1\117\1\10\1\0\2\120"+
    "\1\10\1\0\1\121\1\0\2\10\1\0\1\10\1\0"+
    "\1\10\1\122\1\0\2\10\1\115\2\10\1\123\2\10"+
    "\1\124\1\0\1\10\1\0\1\125\2\126\1\10\2\0"+
    "\1\10\1\127\1\0\1\10\1\127\1\0\1\10\1\0"+
    "\1\10\2\130\1\10\1\125\1\10\2\131\1\132\2\133"+
    "\1\0\1\10\1\134\1\0\1\10\2\135\2\136\2\137"+
    "\1\10\1\134\1\0\1\140\2\141\1\10\2\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[436];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u0109\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u0109\0\u05cc\0\u0601"+
    "\0\u0636\0\u066b\0\u06a0\0\u0109\0\u06d5\0\u070a\0\u073f\0\u0109"+
    "\0\u0109\0\u0109\0\u0109\0\u0109\0\u0109\0\u0109\0\u0109\0\u0109"+
    "\0\u0109\0\u0109\0\u0109\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848"+
    "\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0109\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63"+
    "\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u052d"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u052d\0\u0e14\0\u052d"+
    "\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc"+
    "\0\u0ff1\0\u1026\0\u105b\0\u0109\0\u1090\0\u052d\0\u10c5\0\u0109"+
    "\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u0951"+
    "\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0"+
    "\0\u1415\0\u144a\0\u147f\0\u0601\0\u14b4\0\u14e9\0\u151e\0\u1553"+
    "\0\u1588\0\u15bd\0\u15f2\0\u052d\0\u1627\0\u165c\0\u1691\0\u16c6"+
    "\0\u16fb\0\u1730\0\u1765\0\u0109\0\u0109\0\u052d\0\u179a\0\u052d"+
    "\0\u17cf\0\u052d\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d"+
    "\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5"+
    "\0\u1aea\0\u052d\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u052d"+
    "\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u052d\0\u1cfc\0\u1d31\0\u052d"+
    "\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u052d\0\u1ea4"+
    "\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c"+
    "\0\u2081\0\u052d\0\u20b6\0\u052d\0\u20eb\0\u2120\0\u2155\0\u052d"+
    "\0\u218a\0\u21bf\0\u21f4\0\u0109\0\u2229\0\u052d\0\u225e\0\u2293"+
    "\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406"+
    "\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae"+
    "\0\u25e3\0\u2618\0\u0109\0\u052d\0\u052d\0\u264d\0\u0109\0\u0109"+
    "\0\u0109\0\u2682\0\u0109\0\u26b7\0\u052d\0\u26ec\0\u2721\0\u2756"+
    "\0\u052d\0\u052d\0\u278b\0\u27c0\0\u27f5\0\u052d\0\u282a\0\u0109"+
    "\0\u052d\0\u285f\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d"+
    "\0\u29d2\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb\0\u2b10\0\u052d"+
    "\0\u2b45\0\u2b7a\0\u052d\0\u2baf\0\u2be4\0\u2c19\0\u2c4e\0\u2c83"+
    "\0\u2cb8\0\u2ced\0\u2d22\0\u052d\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6"+
    "\0\u2e2b\0\u052d\0\u052d\0\u2e60\0\u052d\0\u2e95\0\u2eca\0\u2eff"+
    "\0\u2f34\0\u2f69\0\u2f9e\0\u2fd3\0\u3008\0\u303d\0\u3072\0\u30a7"+
    "\0\u30dc\0\u3111\0\u0109\0\u052d\0\u3146\0\u317b\0\u31b0\0\u0109"+
    "\0\u052d\0\u052d\0\u31e5\0\u321a\0\u324f\0\u3284\0\u0109\0\u052d"+
    "\0\u052d\0\u0109\0\u052d\0\u32b9\0\u0109\0\u052d\0\u32ee\0\u0109"+
    "\0\u0109\0\u3323\0\u3358\0\u0109\0\u052d\0\u338d\0\u33c2\0\u33f7"+
    "\0\u342c\0\u3461\0\u3496\0\u34cb\0\u3500\0\u3535\0\u356a\0\u359f"+
    "\0\u0109\0\u052d\0\u35d4\0\u3609\0\u363e\0\u3673\0\u36a8\0\u052d"+
    "\0\u052d\0\u36dd\0\u0109\0\u3712\0\u3747\0\u377c\0\u052d\0\u37b1"+
    "\0\u37e6\0\u052d\0\u052d\0\u381b\0\u0109\0\u3850\0\u3885\0\u38ba"+
    "\0\u0109\0\u052d\0\u052d\0\u38ef\0\u3924\0\u0109\0\u052d\0\u3959"+
    "\0\u398e\0\u052d\0\u39c3\0\u39f8\0\u3a2d\0\u3a62\0\u3a97\0\u3acc"+
    "\0\u3b01\0\u052d\0\u3b36\0\u3b6b\0\u3ba0\0\u052d\0\u3bd5\0\u3c0a"+
    "\0\u052d\0\u3c3f\0\u3c74\0\u052d\0\u3ca9\0\u3cde\0\u3d13\0\u0109"+
    "\0\u0109\0\u052d\0\u3d48\0\u3d7d\0\u3db2\0\u3de7\0\u0109\0\u3e1c"+
    "\0\u3e51\0\u052d\0\u3e86\0\u3ebb\0\u3ef0\0\u3f25\0\u0109\0\u052d"+
    "\0\u3f5a\0\u052d\0\u3f8f\0\u0109\0\u052d\0\u052d\0\u0109\0\u052d"+
    "\0\u3fc4\0\u3ff9\0\u0109\0\u402e\0\u4063\0\u0109\0\u052d\0\u0109"+
    "\0\u052d\0\u0109\0\u052d\0\u4098\0\u052d\0\u40cd\0\u052d\0\u0109"+
    "\0\u052d\0\u4102\0\u0109\0\u052d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[436];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\30\6\1\7\3\6\1\10\1\11\1\12\27\6\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\33\1\35\1\36\1\37\1\40\1\7\1\33"+
    "\1\41\1\42\1\43\1\11\1\12\1\44\1\6\2\33"+
    "\1\45\1\33\1\46\1\6\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\30\65\1\7\4\65\1\66\1\12\1\44"+
    "\25\65\30\67\1\7\4\67\1\70\1\12\26\67\30\64"+
    "\1\7\4\64\1\71\1\12\26\64\123\0\1\12\62\0"+
    "\1\10\65\0\1\11\30\0\1\33\1\72\1\73\1\74"+
    "\1\75\1\76\4\33\1\77\1\0\1\100\7\33\4\0"+
    "\1\33\1\101\2\33\4\0\5\33\1\102\17\0\1\103"+
    "\1\33\1\0\4\33\1\104\3\33\1\0\3\33\1\105"+
    "\4\33\4\0\4\33\4\0\5\33\1\102\23\0\1\106"+
    "\2\0\1\107\3\0\1\110\1\0\1\111\2\0\1\112"+
    "\11\0\1\110\7\0\1\113\22\0\1\114\1\33\1\0"+
    "\3\33\1\72\4\33\1\0\1\115\5\33\1\116\1\33"+
    "\4\0\4\33\4\0\5\33\1\102\17\0\1\117\1\33"+
    "\1\0\3\33\1\120\4\33\1\0\3\33\1\121\2\33"+
    "\1\122\1\33\4\0\4\33\4\0\5\33\1\102\17\0"+
    "\2\33\1\0\3\33\1\123\1\124\3\33\1\0\10\33"+
    "\4\0\4\33\4\0\2\33\1\125\2\33\1\102\17\0"+
    "\2\33\1\0\2\33\1\126\4\33\1\127\1\0\3\33"+
    "\1\130\4\33\4\0\4\33\4\0\2\33\1\131\2\33"+
    "\1\102\17\0\2\33\1\0\2\33\1\132\1\133\2\33"+
    "\1\134\1\33\1\0\1\135\2\33\1\136\4\33\4\0"+
    "\4\33\4\0\5\33\1\102\17\0\2\33\1\0\3\33"+
    "\1\137\4\33\1\140\10\33\4\0\2\33\1\141\1\33"+
    "\4\0\5\33\1\102\17\0\2\33\1\0\3\33\1\142"+
    "\4\33\1\0\10\33\4\0\4\33\4\0\5\33\1\102"+
    "\17\0\2\33\1\0\3\33\1\72\1\143\3\33\1\144"+
    "\3\33\1\145\4\33\4\0\2\33\1\146\1\33\4\0"+
    "\5\33\1\102\24\0\1\147\2\0\1\150\5\0\1\151"+
    "\46\0\2\33\1\0\3\33\1\152\1\153\3\33\1\154"+
    "\10\33\4\0\2\33\1\155\1\33\4\0\5\33\1\102"+
    "\17\0\2\33\1\0\3\33\1\156\4\33\1\0\10\33"+
    "\4\0\4\33\4\0\5\33\1\102\17\0\1\157\1\33"+
    "\1\0\10\33\1\111\10\33\4\0\2\33\1\160\1\33"+
    "\4\0\5\33\1\102\17\0\1\161\1\33\1\0\2\33"+
    "\1\162\1\33\1\163\2\33\1\164\1\0\10\33\4\0"+
    "\4\33\4\0\2\33\1\165\2\33\1\102\17\0\2\33"+
    "\1\0\10\33\1\0\10\33\4\0\4\33\4\0\5\33"+
    "\1\102\17\0\1\166\1\33\1\0\10\33\1\0\10\33"+
    "\4\0\4\33\4\0\5\33\1\102\17\0\1\167\1\33"+
    "\1\0\4\33\1\170\3\33\1\171\10\33\4\0\2\33"+
    "\1\172\1\33\4\0\5\33\1\102\26\0\1\173\23\0"+
    "\1\37\30\0\27\174\1\175\1\0\5\174\1\0\26\174"+
    "\1\0\2\33\1\0\1\33\1\176\2\33\1\177\3\33"+
    "\1\110\1\33\1\160\2\33\1\200\3\33\4\0\2\33"+
    "\1\201\1\33\4\0\2\33\1\202\2\33\1\102\17\0"+
    "\2\33\1\0\2\33\1\203\2\33\1\204\2\33\1\0"+
    "\2\33\1\205\5\33\4\0\4\33\4\0\5\33\1\102"+
    "\26\0\1\173\15\0\1\37\5\0\1\43\31\0\1\206"+
    "\1\33\1\207\2\33\1\210\4\33\1\211\1\0\10\33"+
    "\4\0\1\33\1\212\2\33\4\0\5\33\1\102\17\0"+
    "\1\213\1\33\1\0\10\33\1\0\10\33\4\0\4\33"+
    "\4\0\5\33\1\102\65\0\1\214\15\0\30\64\1\0"+
    "\5\64\1\0\26\64\30\65\1\0\5\65\2\0\55\65"+
    "\1\0\4\65\1\66\2\0\25\65\30\67\1\0\5\67"+
    "\1\0\56\67\1\0\4\67\1\70\1\0\26\67\30\64"+
    "\1\0\4\64\1\71\1\0\26\64\1\0\2\33\1\215"+
    "\10\33\1\0\10\33\4\0\1\33\1\216\2\33\4\0"+
    "\5\33\1\102\22\0\1\215\61\0\2\33\1\0\1\217"+
    "\7\33\1\0\10\33\4\0\4\33\4\0\5\33\1\102"+
    "\17\0\2\33\1\0\2\33\1\216\5\33\1\0\10\33"+
    "\4\0\4\33\4\0\5\33\1\102\17\0\2\33\1\0"+
    "\10\33\1\0\7\33\1\220\4\0\4\33\4\0\5\33"+
    "\1\102\17\0\2\33\1\0\7\33\1\221\1\0\10\33"+
    "\4\0\4\33\4\0\5\33\1\102\17\0\2\33\1\0"+
    "\10\33\1\0\1\222\7\33\4\0\4\33\4\0\5\33"+
    "\1\102\17\0\2\33\1\0\1\216\7\33\1\0\10\33"+
    "\4\0\4\33\4\0\5\33\1\102\17\0\2\33\1\223"+
    "\10\33\1\0\10\33\4\0\1\33\1\224\2\33\4\0"+
    "\5\33\1\102\17\0\2\33\1\0\4\33\1\225\3\33"+
    "\1\0\10\33\4\0\4\33\4\0\5\33\1\102\17\0"+
    "\2\33\1\0\4\33\1\226\3\33\1\0\10\33\4\0"+
    "\4\33\4\0\5\33\1\102\25\0\1\227\1\230\7\0"+
    "\1\231\62\0\1\231\2\0\1\232\51\0\1\215\35\0"+
    "\1\233\26\0\1\215\76\0\1\215\46\0\1\234\63\0"+
    "\2\33\1\0\10\33\1\0\1\235\7\33\4\0\4\33"+
    "\4\0\5\33\1\102\17\0\2\33\1\0\3\33\1\236"+
    "\4\33\1\0\10\33\4\0\4\33\4\0\5\33\1\102"+
    "\17\0\2\33\1\0\10\33\1\0\3\33\1\237\4\33"+
    "\4\0\4\33\4\0\5\33\1\102\17\0\1\33\1\216"+
    "\1\0\2\33\1\216\5\33\1\0\10\33\4\0\4\33"+
    "\4\0\5\33\1\102\17\0\1\240\1\33\1\0\10\33"+
    "\1\0\10\33\4\0\4\33\4\0\5\33\1\102\17\0"+
    "\2\33\1\0\4\33\1\241\3\33\1\0\10\33\4\0"+
    "\4\33\4\0\5\33\1\102\17\0\2\33\1\0\1\33"+
    "\1\242\6\33\1\0\10\33\4\0\4\33\4\0\5\33"+
    "\1\102\17\0\2\33\1\0\6\33\1\243\1\33\1\0"+
    "\10\33\4\0\4\33\4\0\5\33\1\102\17\0\2\33"+
    "\1\0\10\33\1\0\2\33\1\244\5\33\4\0\4\33"+
    "\4\0\5\33\1\102\17\0\2\33\1\0\1\33\1\245"+
    "\2\33\1\246\3\33\1\0\10\33\4\0\4\33\4\0"+
    "\5\33\1\102\17\0\2\33\1\0\1\33\1\247\6\33"+
    "\1\0\10\33\4\0\4\33\4\0\5\33\1\102\17\0"+
    "\2\33\1\0\10\33\1\0\7\33\1\250\4\0\4\33"+
    "\4\0\5\33\1\102\17\0\2\33\1\0\5\33\1\216"+
    "\2\33\1\0\10\33\4\0\4\33\4\0\5\33\1\102"+
    "\17\0\2\33\1\0\7\33\1\216\1\0\10\33\4\0"+
    "\4\33\4\0\5\33\1\102\17\0\2\33\1\251\10\33"+
    "\1\0\10\33\4\0\1\33\1\252\2\33\4\0\5\33"+
    "\1\102\17\0\1\253\1\33\1\0\10\33\1\0\3\33"+
    "\1\254\4\33\4\0\4\33\4\0\5\33\1\102\17\0"+
    "\2\33\1\0\10\33\1\0\3\33\1\255\4\33\4\0"+
    "\4\33\4\0\5\33\1\102\30\0\1\256\53\0\2\33"+
    "\1\0\6\33\1\257\1\33\1\0\10\33\4\0\4\33"+
    "\4\0\5\33\1\102\17\0\2\33\1\0\10\33\1\0"+
    "\3\33\1\260\4\33\4\0\4\33\4\0\5\33\1\102"+
    "\17\0\2\33\1\0\10\33\1\0\3\33\1\261\4\33"+
    "\4\0\4\33\4\0\5\33\1\102\17\0\2\33\1\0"+
    "\10\33\1\262\10\33\4\0\2\33\1\263\1\33\4\0"+
    "\5\33\1\102\23\0\1\264\5\0\1\265\52\0\1\266"+
    "\64\0\2\33\1\0\10\33\1\0\1\33\1\216\6\33"+
    "\4\0\4\33\4\0\5\33\1\102\17\0\2\33\1\0"+
    "\1\33\1\267\1\216\5\33\1\0\10\33\4\0\4\33"+
    "\4\0\5\33\1\102\24\0\1\270\57\0\2\33\1\0"+
    "\2\33\1\271\5\33\1\0\10\33\4\0\4\33\4\0"+
    "\5\33\1\102\17\0\2\33\1\272\1\33\1\273\6\33"+
    "\1\0\10\33\4\0\1\33\1\274\2\33\4\0\5\33"+
    "\1\102\17\0\2\33\1\0\6\33\1\216\1\33\1\0"+
    "\10\33\4\0\4\33\4\0\5\33\1\102\17\0\2\33"+
    "\1\0\2\33\1\275\5\33\1\0\10\33\4\0\4\33"+
    "\4\0\5\33\1\102\17\0\2\33\1\0\10\33\1\0"+
    "\7\33\1\146\4\0\4\33\4\0\5\33\1\102\17\0"+
    "\1\276\1\33\1\277\1\216\1\300\6\33\1\0\1\301"+
    "\1\33\1\302\5\33\4\0\1\33\1\303\2\33\4\0"+
    "\5\33\1\102\17\0\2\33\1\0\1\33\1\237\6\33"+
    "\1\0\10\33\4\0\4\33\4\0\5\33\1\102\17\0"+
    "\2\33\1\0\2\33\1\304\5\33\1\0\10\33\4\0"+
    "\4\33\4\0\5\33\1\102\17\0\2\33\1\0\10\33"+
    "\1\0\1\305\2\33\1\306\4\33\4\0\4\33\4\0"+
    "\5\33\1\102\17\0\2\33\1\0\1\33\1\307\6\33"+
    "\1\0\10\33\4\0\4\33\4\0\5\33\1\102\17\0"+
    "\2\33\1\0\5\33\1\310\2\33\1\0\1\311\7\33"+
    "\4\0\4\33\4\0\5\33\1\102\21\0\1\312\12\0"+
    "\1\313\1\314\12\0\1\312\33\0\2\33\1\312\10\33"+
    "\1\0\1\33\1\315\1\316\5\33\4\0\1\33\1\317"+
    "\2\33\4\0\5\33\1\102\43\0\1\320\6\0\1\321"+
    "\57\0\1\174\36\0\2\33\1\0\3\33\1\322\1\323"+
    "\3\33\1\0\3\33\1\237\4\33\4\0\4\33\4\0"+
    "\5\33\1\102\17\0\2\33\1\0\10\33\1\0\1\33"+
    "\1\237\2\33\1\324\3\33\4\0\4\33\4\0\5\33"+
    "\1\102\17\0\2\33\1\0\10\33\1\0\3\33\1\216"+
    "\4\33\4\0\4\33\4\0\5\33\1\102\17\0\2\33"+
    "\1\0\2\33\1\216\5\33\1\0\10\33\4\0\4\33"+
    "\4\0\3\33\1\325\1\33\1\102\17\0\1\33\1\326"+
    "\1\0\10\33\1\0\10\33\4\0\4\33\4\0\5\33"+
    "\1\102\17\0\2\33\1\0\1\33\1\327\5\33\1\330"+
    "\1\0\10\33\4\0\4\33\4\0\5\33\1\102\17\0"+
    "\1\331\1\33\1\0\10\33\1\0\10\33\4\0\4\33"+
    "\4\0\5\33\1\102\17\0\2\33\1\0\10\33\1\0"+
    "\1\332\7\33\4\0\4\33\4\0\5\33\1\102\32\0"+
    "\1\333\16\0\1\333\32\0\1\33\1\334\1\0\1\33"+
    "\1\335\6\33\1\0\10\33\4\0\4\33\4\0\5\33"+
    "\1\102\17\0\2\33\1\0\10\33\1\0\7\33\1\336"+
    "\4\0\4\33\4\0\5\33\1\102\17\0\2\33\1\0"+
    "\10\33\1\333\10\33\4\0\2\33\1\337\1\33\4\0"+
    "\5\33\1\102\17\0\2\33\1\0\10\33\1\0\3\33"+
    "\1\340\4\33\4\0\4\33\4\0\5\33\1\102\17\0"+
    "\2\33\1\0\4\33\1\341\3\33\1\0\10\33\4\0"+
    "\4\33\4\0\5\33\1\102\17\0\2\33\1\0\4\33"+
    "\1\342\3\33\1\0\10\33\4\0\4\33\4\0\5\33"+
    "\1\102\26\0\1\343\55\0\2\33\1\0\4\33\1\344"+
    "\3\33\1\0\10\33\4\0\4\33\4\0\5\33\1\102"+
    "\17\0\2\33\1\0\7\33\1\345\1\0\10\33\4\0"+
    "\4\33\4\0\5\33\1\102\17\0\1\346\1\33\1\0"+
    "\10\33\1\0\10\33\4\0\4\33\4\0\5\33\1\102"+
    "\31\0\1\347\64\0\1\350\117\0\1\351\61\0\1\352"+
    "\31\0\1\353\64\0\1\354\55\0\2\33\1\0\10\33"+
    "\1\0\1\355\7\33\4\0\4\33\4\0\5\33\1\102"+
    "\17\0\2\33\1\356\10\33\1\0\10\33\4\0\1\33"+
    "\1\357\2\33\4\0\5\33\1\102\17\0\2\33\1\0"+
    "\10\33\1\0\10\33\4\0\4\33\4\0\5\33\1\351"+
    "\17\0\2\33\1\0\1\360\7\33\1\0\10\33\4\0"+
    "\4\33\4\0\5\33\1\102\17\0\2\33\1\0\2\33"+
    "\1\361\5\33\1\0\10\33\4\0\4\33\4\0\5\33"+
    "\1\102\17\0\2\33\1\0\1\33\1\362\6\33\1\0"+
    "\10\33\4\0\4\33\4\0\5\33\1\102\17\0\2\33"+
    "\1\0\4\33\1\363\3\33\1\0\10\33\4\0\4\33"+
    "\4\0\5\33\1\102\17\0\2\33\1\0\10\33\1\364"+
    "\10\33\4\0\2\33\1\365\1\33\4\0\5\33\1\102"+
    "\17\0\2\33\1\0\2\33\1\366\5\33\1\0\10\33"+
    "\4\0\4\33\4\0\5\33\1\102\17\0\2\33\1\0"+
    "\7\33\1\367\1\0\10\33\4\0\4\33\4\0\5\33"+
    "\1\102\26\0\1\370\55\0\2\33\1\0\4\33\1\371"+
    "\3\33\1\0\10\33\4\0\4\33\4\0\5\33\1\102"+
    "\17\0\2\33\1\372\10\33\1\0\10\33\4\0\1\33"+
    "\1\373\2\33\4\0\5\33\1\102\17\0\2\33\1\0"+
    "\3\33\1\374\4\33\1\0\10\33\4\0\4\33\4\0"+
    "\5\33\1\102\26\0\1\375\55\0\2\33\1\0\4\33"+
    "\1\376\3\33\1\0\10\33\4\0\4\33\4\0\5\33"+
    "\1\102\17\0\2\33\1\0\10\33\1\0\2\33\1\377"+
    "\5\33\4\0\4\33\4\0\5\33\1\102\24\0\1\u0100"+
    "\57\0\2\33\1\0\2\33\1\u0101\5\33\1\0\10\33"+
    "\4\0\4\33\4\0\5\33\1\102\26\0\1\u0102\117\0"+
    "\1\u0103\37\0\1\u0104\61\0\1\u0105\52\0\2\33\1\0"+
    "\7\33\1\u0106\1\0\10\33\4\0\4\33\4\0\5\33"+
    "\1\102\61\0\1\u0107\22\0\2\33\1\0\3\33\1\u0108"+
    "\4\33\1\0\10\33\4\0\4\33\4\0\5\33\1\102"+
    "\17\0\2\33\1\0\10\33\1\0\10\33\4\0\4\33"+
    "\4\0\2\33\1\u0109\2\33\1\102\17\0\2\33\1\0"+
    "\10\33\1\0\7\33\1\u010a\4\0\4\33\4\0\5\33"+
    "\1\102\17\0\2\33\1\0\10\33\1\0\7\33\1\u010b"+
    "\4\0\4\33\4\0\5\33\1\102\23\0\1\u010c\60\0"+
    "\2\33\1\0\10\33\1\0\10\33\4\0\4\33\4\0"+
    "\2\33\1\u010d\2\33\1\102\17\0\1\u010e\1\33\1\0"+
    "\10\33\1\0\10\33\4\0\4\33\4\0\5\33\1\102"+
    "\17\0\2\33\1\0\1\33\1\u010f\6\33\1\0\10\33"+
    "\4\0\4\33\4\0\5\33\1\102\17\0\2\33\1\0"+
    "\10\33\1\u0110\10\33\4\0\2\33\1\u0111\1\33\4\0"+
    "\5\33\1\102\17\0\2\33\1\0\10\33\1\u0112\10\33"+
    "\4\0\2\33\1\u0113\1\33\4\0\5\33\1\102\17\0"+
    "\1\u0114\1\33\1\0\10\33\1\0\10\33\4\0\4\33"+
    "\4\0\5\33\1\102\17\0\2\33\1\0\4\33\1\u0115"+
    "\3\33\1\0\10\33\4\0\4\33\4\0\5\33\1\102"+
    "\31\0\1\u0116\65\0\1\u0117\16\0\1\u0117\32\0\2\33"+
    "\1\0\10\33\1\u0117\10\33\4\0\2\33\1\u0118\1\33"+
    "\4\0\5\33\1\102\17\0\2\33\1\0\7\33\1\u0119"+
    "\1\0\10\33\4\0\4\33\4\0\5\33\1\102\52\0"+
    "\1\321\31\0\2\33\1\0\7\33\1\u011a\1\0\10\33"+
    "\4\0\4\33\4\0\5\33\1\102\17\0\2\33\1\0"+
    "\7\33\1\u011b\1\0\10\33\4\0\4\33\4\0\5\33"+
    "\1\102\17\0\2\33\1\0\10\33\1\0\10\33\4\0"+
    "\4\33\4\0\2\33\1\u011c\2\33\1\102\17\0\2\33"+
    "\1\0\4\33\1\u011d\3\33\1\0\10\33\4\0\4\33"+
    "\4\0\5\33\1\102\17\0\2\33\1\0\4\33\1\u011e"+
    "\3\33\1\0\10\33\4\0\4\33\4\0\5\33\1\102"+
    "\17\0\2\33\1\0\4\33\1\u011f\3\33\1\0\10\33"+
    "\4\0\4\33\4\0\5\33\1\102\17\0\2\33\1\0"+
    "\10\33\1\0\10\33\4\0\4\33\4\0\2\33\1\u0120"+
    "\2\33\1\102\17\0\2\33\1\0\10\33\1\0\1\33"+
    "\1\u0121\6\33\4\0\4\33\4\0\5\33\1\102\17\0"+
    "\2\33\1\0\7\33\1\u0122\1\0\10\33\4\0\4\33"+
    "\4\0\5\33\1\102\24\0\1\u0123\57\0\2\33\1\0"+
    "\10\33\1\0\3\33\1\u0124\4\33\4\0\4\33\4\0"+
    "\5\33\1\102\17\0\2\33\1\0\10\33\1\0\3\33"+
    "\1\u0125\4\33\4\0\4\33\4\0\5\33\1\102\17\0"+
    "\1\u0126\1\33\1\0\10\33\1\0\10\33\4\0\4\33"+
    "\4\0\5\33\1\102\17\0\2\33\1\0\2\33\1\u0127"+
    "\5\33\1\0\10\33\4\0\4\33\4\0\5\33\1\102"+
    "\17\0\2\33\1\0\2\33\1\u0128\5\33\1\0\10\33"+
    "\4\0\4\33\4\0\5\33\1\102\17\0\2\33\1\0"+
    "\7\33\1\u0129\1\0\10\33\4\0\4\33\4\0\5\33"+
    "\1\102\17\0\2\33\1\0\2\33\1\u012a\5\33\1\0"+
    "\10\33\4\0\4\33\4\0\5\33\1\102\17\0\2\33"+
    "\1\0\10\33\1\0\10\33\4\0\4\33\3\0\1\u012b"+
    "\1\u012c\4\33\1\102\26\0\1\u012d\62\0\1\u012e\3\0"+
    "\1\u012f\62\0\1\u0130\55\0\2\33\1\0\4\33\1\u0131"+
    "\3\33\1\0\10\33\4\0\4\33\4\0\5\33\1\102"+
    "\17\0\2\33\1\0\4\33\1\u0132\3\33\1\0\10\33"+
    "\4\0\4\33\4\0\5\33\1\102\17\0\2\33\1\0"+
    "\10\33\1\0\3\33\1\u0133\4\33\4\0\4\33\4\0"+
    "\5\33\1\102\25\0\1\u0134\56\0\2\33\1\0\3\33"+
    "\1\u0135\4\33\1\0\10\33\4\0\4\33\4\0\5\33"+
    "\1\102\17\0\2\33\1\0\10\33\1\0\10\33\4\0"+
    "\4\33\4\0\2\33\1\u0136\2\33\1\102\26\0\1\u0137"+
    "\55\0\2\33\1\0\4\33\1\u0138\3\33\1\0\10\33"+
    "\4\0\4\33\4\0\5\33\1\102\17\0\2\33\1\0"+
    "\10\33\1\0\3\33\1\u0139\4\33\4\0\4\33\4\0"+
    "\5\33\1\102\42\0\1\u013a\41\0\2\33\1\0\10\33"+
    "\1\0\7\33\1\u013b\4\0\4\33\4\0\5\33\1\102"+
    "\17\0\1\u013c\1\33\1\0\10\33\1\0\10\33\4\0"+
    "\4\33\4\0\5\33\1\102\23\0\1\u013d\60\0\2\33"+
    "\1\0\1\33\1\u013e\6\33\1\0\10\33\4\0\4\33"+
    "\4\0\5\33\1\102\36\0\1\u013f\51\0\1\u0140\67\0"+
    "\1\u0141\117\0\1\u0142\22\0\2\33\1\0\10\33\1\0"+
    "\10\33\4\0\4\33\4\0\2\33\1\u0143\2\33\1\102"+
    "\20\0\1\u0144\63\0\1\33\1\u0145\1\0\10\33\1\0"+
    "\10\33\4\0\4\33\4\0\5\33\1\102\17\0\2\33"+
    "\1\0\3\33\1\u0146\4\33\1\0\10\33\4\0\4\33"+
    "\4\0\5\33\1\102\25\0\1\u0147\56\0\2\33\1\0"+
    "\10\33\1\0\3\33\1\u0148\4\33\4\0\4\33\4\0"+
    "\5\33\1\102\17\0\2\33\1\0\1\33\1\u0149\6\33"+
    "\1\0\10\33\4\0\4\33\4\0\5\33\1\102\17\0"+
    "\2\33\1\0\3\33\1\u014a\4\33\1\0\10\33\4\0"+
    "\4\33\4\0\5\33\1\102\42\0\1\u014b\41\0\2\33"+
    "\1\0\10\33\1\0\7\33\1\u014c\4\0\4\33\4\0"+
    "\5\33\1\102\17\0\1\u014d\64\0\1\u014e\1\33\1\0"+
    "\10\33\1\0\10\33\4\0\4\33\4\0\5\33\1\102"+
    "\17\0\2\33\1\0\1\33\1\u014f\6\33\1\0\10\33"+
    "\4\0\4\33\4\0\5\33\1\102\33\0\1\u0150\54\0"+
    "\1\u0151\60\0\2\33\1\0\1\33\1\u0152\6\33\1\0"+
    "\10\33\4\0\4\33\4\0\5\33\1\102\17\0\2\33"+
    "\1\0\10\33\1\0\1\u0153\7\33\4\0\4\33\4\0"+
    "\5\33\1\102\17\0\2\33\1\0\4\33\1\u0154\3\33"+
    "\1\0\10\33\4\0\4\33\4\0\5\33\1\102\17\0"+
    "\2\33\1\0\2\33\1\u0155\3\33\1\u0156\1\33\1\0"+
    "\10\33\4\0\4\33\4\0\5\33\1\102\17\0\2\33"+
    "\1\0\10\33\1\0\3\33\1\u0157\4\33\4\0\4\33"+
    "\4\0\5\33\1\102\17\0\2\33\1\0\1\33\1\u0158"+
    "\6\33\1\0\10\33\4\0\4\33\4\0\5\33\1\102"+
    "\17\0\2\33\1\0\4\33\1\u0159\3\33\1\0\10\33"+
    "\4\0\4\33\4\0\5\33\1\102\17\0\2\33\1\0"+
    "\10\33\1\0\6\33\1\u015a\1\33\4\0\4\33\4\0"+
    "\5\33\1\102\34\0\1\u015b\47\0\2\33\1\0\4\33"+
    "\1\u015c\3\33\1\0\10\33\4\0\4\33\4\0\5\33"+
    "\1\102\17\0\1\u015d\1\33\1\0\10\33\1\0\10\33"+
    "\4\0\4\33\4\0\5\33\1\102\17\0\2\33\1\0"+
    "\1\33\1\u015e\6\33\1\0\10\33\4\0\4\33\4\0"+
    "\5\33\1\102\17\0\2\33\1\0\10\33\1\0\1\33"+
    "\1\u015f\6\33\4\0\4\33\4\0\5\33\1\102\17\0"+
    "\2\33\1\0\10\33\1\u0160\10\33\4\0\2\33\1\u0161"+
    "\1\33\4\0\5\33\1\102\17\0\2\33\1\0\1\33"+
    "\1\u0162\6\33\1\0\10\33\4\0\4\33\4\0\5\33"+
    "\1\102\17\0\2\33\1\0\10\33\1\0\7\33\1\u0163"+
    "\4\0\4\33\4\0\5\33\1\102\24\0\1\u0164\102\0"+
    "\1\u0165\54\0\1\u0166\16\0\1\u0166\32\0\2\33\1\0"+
    "\10\33\1\u0167\10\33\4\0\2\33\1\u0168\1\33\4\0"+
    "\5\33\1\102\24\0\1\u0169\57\0\2\33\1\0\2\33"+
    "\1\u016a\5\33\1\0\10\33\4\0\4\33\4\0\5\33"+
    "\1\102\17\0\2\33\1\0\1\33\1\u016b\6\33\1\0"+
    "\10\33\4\0\4\33\4\0\5\33\1\102\17\0\2\33"+
    "\1\0\2\33\1\u016c\5\33\1\0\10\33\4\0\4\33"+
    "\4\0\5\33\1\102\24\0\1\u016d\63\0\1\u016e\60\0"+
    "\2\33\1\0\1\33\1\u016f\6\33\1\0\10\33\4\0"+
    "\4\33\4\0\5\33\1\102\17\0\2\33\1\0\10\33"+
    "\1\0\2\33\1\u0170\5\33\4\0\4\33\4\0\5\33"+
    "\1\102\36\0\1\u0171\45\0\2\33\1\0\2\33\1\u0172"+
    "\5\33\1\0\10\33\4\0\4\33\4\0\5\33\1\102"+
    "\17\0\2\33\1\0\10\33\1\u0173\10\33\4\0\2\33"+
    "\1\u0174\1\33\4\0\5\33\1\102\17\0\2\33\1\0"+
    "\10\33\1\0\3\33\1\u0175\4\33\4\0\4\33\4\0"+
    "\5\33\1\102\17\0\1\u0176\64\0\1\u0177\1\33\1\0"+
    "\10\33\1\0\10\33\4\0\4\33\4\0\5\33\1\102"+
    "\20\0\1\u0178\63\0\1\33\1\u0179\1\0\10\33\1\0"+
    "\10\33\4\0\4\33\4\0\5\33\1\102\17\0\2\33"+
    "\1\0\4\33\1\u017a\3\33\1\0\10\33\4\0\4\33"+
    "\4\0\5\33\1\102\17\0\1\u017b\64\0\1\u017c\1\33"+
    "\1\0\10\33\1\0\10\33\4\0\4\33\4\0\5\33"+
    "\1\102\17\0\2\33\1\0\2\33\1\u017d\5\33\1\0"+
    "\10\33\4\0\4\33\4\0\5\33\1\102\17\0\2\33"+
    "\1\0\10\33\1\0\7\33\1\u017e\4\0\4\33\4\0"+
    "\5\33\1\102\17\0\2\33\1\0\10\33\1\u0166\10\33"+
    "\4\0\2\33\1\u017f\1\33\4\0\5\33\1\102\17\0"+
    "\2\33\1\0\2\33\1\u0180\5\33\1\0\10\33\4\0"+
    "\4\33\4\0\5\33\1\102\17\0\1\u0181\1\33\1\0"+
    "\10\33\1\0\10\33\4\0\4\33\4\0\5\33\1\102"+
    "\17\0\1\u0182\1\33\1\0\10\33\1\0\10\33\4\0"+
    "\4\33\4\0\5\33\1\102\17\0\2\33\1\0\1\u0183"+
    "\7\33\1\0\10\33\4\0\4\33\4\0\5\33\1\102"+
    "\17\0\2\33\1\0\4\33\1\u0184\3\33\1\0\10\33"+
    "\4\0\4\33\4\0\5\33\1\102\24\0\1\u0185\57\0"+
    "\2\33\1\0\2\33\1\u0186\5\33\1\0\10\33\4\0"+
    "\4\33\4\0\5\33\1\102\23\0\1\u0187\64\0\1\u0188"+
    "\63\0\1\u0189\61\0\2\33\1\0\1\u018a\7\33\1\0"+
    "\10\33\4\0\4\33\4\0\5\33\1\102\17\0\2\33"+
    "\1\0\4\33\1\u018b\3\33\1\0\10\33\4\0\4\33"+
    "\4\0\5\33\1\102\17\0\1\u018c\64\0\2\33\1\0"+
    "\10\33\1\u018d\10\33\4\0\2\33\1\u018e\1\33\4\0"+
    "\5\33\1\102\26\0\1\u018f\76\0\1\u0190\43\0\2\33"+
    "\1\0\10\33\1\0\5\33\1\u0191\2\33\4\0\4\33"+
    "\4\0\5\33\1\102\17\0\2\33\1\0\4\33\1\u0192"+
    "\3\33\1\0\10\33\4\0\4\33\4\0\5\33\1\102"+
    "\23\0\1\u0193\60\0\2\33\1\0\1\33\1\u0194\6\33"+
    "\1\0\10\33\4\0\4\33\4\0\5\33\1\102\33\0"+
    "\1\u0195\50\0\2\33\1\0\10\33\1\0\1\u0196\7\33"+
    "\4\0\4\33\4\0\5\33\1\102\60\0\1\u0197\23\0"+
    "\2\33\1\0\10\33\1\0\10\33\4\0\4\33\4\0"+
    "\1\33\1\u0198\3\33\1\102\17\0\2\33\1\0\1\33"+
    "\1\u0199\6\33\1\0\10\33\4\0\4\33\4\0\5\33"+
    "\1\102\17\0\2\33\1\0\1\33\1\u019a\6\33\1\0"+
    "\10\33\4\0\4\33\4\0\5\33\1\102\17\0\1\u019b"+
    "\1\33\1\0\10\33\1\0\10\33\4\0\4\33\4\0"+
    "\5\33\1\102\17\0\2\33\1\0\10\33\1\0\10\33"+
    "\4\0\4\33\3\0\1\u019c\1\u019d\4\33\1\102\17\0"+
    "\2\33\1\0\4\33\1\u019e\3\33\1\0\10\33\4\0"+
    "\4\33\4\0\5\33\1\102\34\0\1\u019f\47\0\2\33"+
    "\1\0\10\33\1\0\1\33\1\u01a0\6\33\4\0\4\33"+
    "\4\0\5\33\1\102\32\0\1\u01a1\16\0\1\u01a1\32\0"+
    "\2\33\1\0\2\33\1\u01a2\5\33\1\0\10\33\4\0"+
    "\4\33\4\0\5\33\1\102\33\0\1\u01a3\113\0\1\u01a4"+
    "\21\0\2\33\1\0\10\33\1\0\10\33\4\0\4\33"+
    "\4\0\3\33\1\u01a5\1\33\1\102\26\0\1\u01a6\55\0"+
    "\2\33\1\0\4\33\1\u01a7\3\33\1\0\10\33\4\0"+
    "\4\33\4\0\5\33\1\102\26\0\1\u01a8\55\0\2\33"+
    "\1\0\4\33\1\u01a9\3\33\1\0\10\33\4\0\4\33"+
    "\4\0\5\33\1\102\26\0\1\u01aa\55\0\2\33\1\0"+
    "\4\33\1\u01ab\3\33\1\0\10\33\4\0\4\33\4\0"+
    "\5\33\1\102\17\0\2\33\1\0\10\33\1\u01a1\10\33"+
    "\4\0\2\33\1\u01ac\1\33\4\0\5\33\1\102\17\0"+
    "\2\33\1\0\10\33\1\0\1\u01ad\7\33\4\0\4\33"+
    "\4\0\5\33\1\102\17\0\1\u01ae\64\0\2\33\1\0"+
    "\1\33\1\u01af\6\33\1\0\10\33\4\0\4\33\4\0"+
    "\5\33\1\102\26\0\1\u01b0\55\0\2\33\1\0\4\33"+
    "\1\u01b1\3\33\1\0\10\33\4\0\4\33\4\0\5\33"+
    "\1\102\17\0\1\u01b2\1\33\1\0\10\33\1\0\10\33"+
    "\4\0\4\33\4\0\5\33\1\102\33\0\1\u01b3\50\0"+
    "\2\33\1\0\10\33\1\0\1\u01b4\7\33\4\0\4\33"+
    "\4\0\5\33\1\102\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16695];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\1\1\11\3\1\1\11\23\1\1\11\5\1"+
    "\1\11\3\1\14\11\7\1\1\0\6\1\1\11\3\1"+
    "\6\0\24\1\1\0\3\1\1\11\2\1\1\0\1\11"+
    "\1\0\2\1\1\0\14\1\1\0\1\1\2\0\12\1"+
    "\1\0\4\1\2\11\5\1\1\0\3\1\5\0\15\1"+
    "\1\0\4\1\1\0\3\1\1\0\2\1\2\0\1\1"+
    "\1\0\1\1\1\0\4\1\1\0\12\1\2\0\1\11"+
    "\3\1\1\0\12\1\1\0\7\1\1\11\3\1\3\11"+
    "\1\0\1\11\1\0\1\1\1\0\5\1\1\0\3\1"+
    "\1\11\1\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\4\0\1\1\1\0\4\1\1\0\3\1\1\0\1\1"+
    "\1\0\3\1\2\0\13\1\1\0\7\1\1\11\1\1"+
    "\3\0\1\11\3\1\1\0\2\1\1\11\2\1\1\11"+
    "\2\1\1\11\1\1\1\0\2\11\1\0\1\1\1\11"+
    "\2\1\1\0\3\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\11\11\1\1\11\4\1\1\0\3\1\1\0\1\11"+
    "\2\0\1\1\1\11\3\1\1\0\1\11\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\11\1\1\0\1\1\1\0\2\11\2\1\2\0\1\1"+
    "\1\11\1\0\2\1\1\0\1\1\1\0\1\1\1\11"+
    "\4\1\1\11\2\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\11\3\1"+
    "\1\0\1\1\1\11\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[436];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Xbas99Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return Xbas99Types.A_DATA;
            } 
            // fall through
          case 99: break;
          case 2: 
            { return Xbas99Types.A_IMAGE;
            } 
            // fall through
          case 100: break;
          case 3: 
            { return Xbas99Types.COMMENT;
            } 
            // fall through
          case 101: break;
          case 4: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 102: break;
          case 5: 
            { yybegin(YYINITIAL); return Xbas99Types.CRLF;
            } 
            // fall through
          case 103: break;
          case 6: 
            { yybegin(STMT); return Xbas99Types.LNUMBER;
            } 
            // fall through
          case 104: break;
          case 7: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 105: break;
          case 8: 
            { return Xbas99Types.IDENT;
            } 
            // fall through
          case 106: break;
          case 9: 
            { return Xbas99Types.OP_MINUS;
            } 
            // fall through
          case 107: break;
          case 10: 
            { return Xbas99Types.FLOAT;
            } 
            // fall through
          case 108: break;
          case 11: 
            { return Xbas99Types.NUMBER;
            } 
            // fall through
          case 109: break;
          case 12: 
            { return Xbas99Types.OP_COMMA;
            } 
            // fall through
          case 110: break;
          case 13: 
            { return Xbas99Types.OP_COLON;
            } 
            // fall through
          case 111: break;
          case 14: 
            { return Xbas99Types.OP_SEMI;
            } 
            // fall through
          case 112: break;
          case 15: 
            { return Xbas99Types.OP_EQ;
            } 
            // fall through
          case 113: break;
          case 16: 
            { return Xbas99Types.OP_LT;
            } 
            // fall through
          case 114: break;
          case 17: 
            { return Xbas99Types.OP_GT;
            } 
            // fall through
          case 115: break;
          case 18: 
            { return Xbas99Types.OP_HASH;
            } 
            // fall through
          case 116: break;
          case 19: 
            { return Xbas99Types.OP_LPAREN;
            } 
            // fall through
          case 117: break;
          case 20: 
            { return Xbas99Types.OP_RPAREN;
            } 
            // fall through
          case 118: break;
          case 21: 
            { return Xbas99Types.OP_AMP;
            } 
            // fall through
          case 119: break;
          case 22: 
            { return Xbas99Types.OP_MUL;
            } 
            // fall through
          case 120: break;
          case 23: 
            { return Xbas99Types.OP_DIV;
            } 
            // fall through
          case 121: break;
          case 24: 
            { return Xbas99Types.OP_PLUS;
            } 
            // fall through
          case 122: break;
          case 25: 
            { return Xbas99Types.OP_EXP;
            } 
            // fall through
          case 123: break;
          case 26: 
            { return Xbas99Types.W_AT;
            } 
            // fall through
          case 124: break;
          case 27: 
            { return Xbas99Types.SIDENT;
            } 
            // fall through
          case 125: break;
          case 28: 
            { return Xbas99Types.W_TO;
            } 
            // fall through
          case 126: break;
          case 29: 
            { return Xbas99Types.W_ON;
            } 
            // fall through
          case 127: break;
          case 30: 
            { return Xbas99Types.W_OR;
            } 
            // fall through
          case 128: break;
          case 31: 
            { return Xbas99Types.W_FUN_C;
            } 
            // fall through
          case 129: break;
          case 32: 
            { return Xbas99Types.W_IF;
            } 
            // fall through
          case 130: break;
          case 33: 
            { return Xbas99Types.W_GO;
            } 
            // fall through
          case 131: break;
          case 34: 
            { return Xbas99Types.QSTRING;
            } 
            // fall through
          case 132: break;
          case 35: 
            { return Xbas99Types.OP_SEP;
            } 
            // fall through
          case 133: break;
          case 36: 
            { return Xbas99Types.W_FUN_N;
            } 
            // fall through
          case 134: break;
          case 37: 
            { return Xbas99Types.W_AND;
            } 
            // fall through
          case 135: break;
          case 38: 
            { return Xbas99Types.W_ALL;
            } 
            // fall through
          case 136: break;
          case 39: 
            { return Xbas99Types.W_SUB;
            } 
            // fall through
          case 137: break;
          case 40: 
            { return Xbas99Types.W_NOT;
            } 
            // fall through
          case 138: break;
          case 41: 
            { return Xbas99Types.W_END;
            } 
            // fall through
          case 139: break;
          case 42: 
            { return Xbas99Types.W_FOR;
            } 
            // fall through
          case 140: break;
          case 43: 
            { return Xbas99Types.W_XOR;
            } 
            // fall through
          case 141: break;
          case 44: 
            { return Xbas99Types.W_LET;
            } 
            // fall through
          case 142: break;
          case 45: 
            { yybegin(REM); return Xbas99Types.W_REM;
            } 
            // fall through
          case 143: break;
          case 46: 
            { return Xbas99Types.W_RUN;
            } 
            // fall through
          case 144: break;
          case 47: 
            { return Xbas99Types.W_DEF;
            } 
            // fall through
          case 145: break;
          case 48: 
            { return Xbas99Types.W_DIM;
            } 
            // fall through
          case 146: break;
          case 49: 
            { return Xbas99Types.W_BASE;
            } 
            // fall through
          case 147: break;
          case 50: 
            { return Xbas99Types.W_BEEP;
            } 
            // fall through
          case 148: break;
          case 51: 
            { return Xbas99Types.W_STOP;
            } 
            // fall through
          case 149: break;
          case 52: 
            { return Xbas99Types.W_STEP;
            } 
            // fall through
          case 150: break;
          case 53: 
            { return Xbas99Types.W_FUN_S;
            } 
            // fall through
          case 151: break;
          case 54: 
            { return Xbas99Types.W_SIZE;
            } 
            // fall through
          case 152: break;
          case 55: 
            { return Xbas99Types.W_CALL;
            } 
            // fall through
          case 153: break;
          case 56: 
            { return Xbas99Types.W_THEN;
            } 
            // fall through
          case 154: break;
          case 57: 
            { return Xbas99Types.W_NEXT;
            } 
            // fall through
          case 155: break;
          case 58: 
            { return Xbas99Types.W_OPEN;
            } 
            // fall through
          case 156: break;
          case 59: 
            { return Xbas99Types.W_ELSE;
            } 
            // fall through
          case 157: break;
          case 60: 
            { return Xbas99Types.W_GOTO;
            } 
            // fall through
          case 158: break;
          case 61: 
            { return Xbas99Types.W_READ;
            } 
            // fall through
          case 159: break;
          case 62: 
            { yybegin(DATA); return Xbas99Types.W_DATA;
            } 
            // fall through
          case 160: break;
          case 63: 
            { return Xbas99Types.W_BREAK;
            } 
            // fall through
          case 161: break;
          case 64: 
            { return Xbas99Types.W_CLOSE;
            } 
            // fall through
          case 162: break;
          case 65: 
            { return Xbas99Types.W_TRACE;
            } 
            // fall through
          case 163: break;
          case 66: 
            { return Xbas99Types.W_ERASE;
            } 
            // fall through
          case 164: break;
          case 67: 
            { return Xbas99Types.W_ERROR;
            } 
            // fall through
          case 165: break;
          case 68: 
            { return Xbas99Types.W_FIXED;
            } 
            // fall through
          case 166: break;
          case 69: 
            { return Xbas99Types.W_PRINT;
            } 
            // fall through
          case 167: break;
          case 70: 
            { return Xbas99Types.W_INPUT;
            } 
            // fall through
          case 168: break;
          case 71: 
            { yybegin(IMAGE); return Xbas99Types.W_IMAGE;
            } 
            // fall through
          case 169: break;
          case 72: 
            { return Xbas99Types.W_GOSUB;
            } 
            // fall through
          case 170: break;
          case 73: 
            { return Xbas99Types.W_DIGIT;
            } 
            // fall through
          case 171: break;
          case 74: 
            { return Xbas99Types.W_USING;
            } 
            // fall through
          case 172: break;
          case 75: 
            { return Xbas99Types.W_ACCEPT;
            } 
            // fall through
          case 173: break;
          case 76: 
            { return Xbas99Types.W_APPEND;
            } 
            // fall through
          case 174: break;
          case 77: 
            { return Xbas99Types.W_SUBEND;
            } 
            // fall through
          case 175: break;
          case 78: 
            { return Xbas99Types.W_OPTION;
            } 
            // fall through
          case 176: break;
          case 79: 
            { return Xbas99Types.W_OUTPUT;
            } 
            // fall through
          case 177: break;
          case 80: 
            { return Xbas99Types.W_LINPUT;
            } 
            // fall through
          case 178: break;
          case 81: 
            { return Xbas99Types.W_RETURN;
            } 
            // fall through
          case 179: break;
          case 82: 
            { return Xbas99Types.W_DELETE;
            } 
            // fall through
          case 180: break;
          case 83: 
            { return Xbas99Types.W_UALPHA;
            } 
            // fall through
          case 181: break;
          case 84: 
            { return Xbas99Types.W_UPDATE;
            } 
            // fall through
          case 182: break;
          case 85: 
            { return Xbas99Types.W_SUBEXIT;
            } 
            // fall through
          case 183: break;
          case 86: 
            { return Xbas99Types.W_NUMERIC;
            } 
            // fall through
          case 184: break;
          case 87: 
            { return Xbas99Types.W_RESTORE;
            } 
            // fall through
          case 185: break;
          case 88: 
            { return Xbas99Types.W_DISPLAY;
            } 
            // fall through
          case 186: break;
          case 89: 
            { return Xbas99Types.W_UNBREAK;
            } 
            // fall through
          case 187: break;
          case 90: 
            { return Xbas99Types.W_UNTRACE;
            } 
            // fall through
          case 188: break;
          case 91: 
            { return Xbas99Types.W_WARNING;
            } 
            // fall through
          case 189: break;
          case 92: 
            { return Xbas99Types.W_INTERNAL;
            } 
            // fall through
          case 190: break;
          case 93: 
            { return Xbas99Types.W_RELATIVE;
            } 
            // fall through
          case 191: break;
          case 94: 
            { return Xbas99Types.W_VALIDATE;
            } 
            // fall through
          case 192: break;
          case 95: 
            { return Xbas99Types.W_VARIABLE;
            } 
            // fall through
          case 193: break;
          case 96: 
            { return Xbas99Types.W_PERMANENT;
            } 
            // fall through
          case 194: break;
          case 97: 
            { return Xbas99Types.W_RANDOMIZE;
            } 
            // fall through
          case 195: break;
          case 98: 
            { return Xbas99Types.W_SEQUENTIAL;
            } 
            // fall through
          case 196: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
