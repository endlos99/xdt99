{
    parserClass="net.endlos.xdt99.xbas99.parser.Xbas99Parser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Xbas99"
    psiImplClassSuffix="Impl"
    psiPackage="net.endlos.xdt99.xbas99.psi"
    psiImplPackage="net.endlos.xdt99.xbas99.psi.impl"

    elementTypeHolderClass="net.endlos.xdt99.xbas99.psi.Xbas99Types"
    elementTypeClass="net.endlos.xdt99.xbas99.psi.Xbas99ElementType"
    tokenTypeClass="net.endlos.xdt99.xbas99.psi.Xbas99TokenType"

    psiImplUtilClass="net.endlos.xdt99.xbas99.psi.impl.Xbas99PsiImplUtil"
}

xbas99File ::=
    (line? CRLF)*
private line ::=
    linedef slist?
    {pin=1 recoverWhile="line_recover"}
private line_recover ::=
    !CRLF
slist ::=
    statement (OP_SEP statement)*
    //{pin="OP_SEP" recoverWhile="slist_recover"}  // couldn't get this to work
    {name="statement list"}
private slist_recover ::=
    !OP_SEP

// statements
private statement ::=
    statement_xb | statement_both
statement_both ::=
    (s_break |  // includes unbreak
     s_call |
     s_close |
     s_data |
     s_def |
     s_delete |
     s_dim |
     s_display |  // TI-BASIC: similar to print, XB: AT(), SIZE, ...
     s_end |
     s_for |
     s_go |
     s_if |
     s_image |
     s_input |
     s_next |
     s_on_go |
     s_open |
     s_option |
     s_print |
     s_randomize |
     s_read |
     s_rem |
     s_restore |
     s_return |
     s_stop |
     s_trace |  // includes untrace
     s_let)  // keep this as last rule
     bang_comment?
statement_xb ::=
    (s_accept |  // xb only
     s_linput |  // XB only
     s_on_cond |  // XB only
     s_run |  // xb only
     s_sub |  // xb only
     s_subend)  // xb only
     bang_comment? |
    bang_comment  // xb only

s_accept ::=
    W_ACCEPT (a_accept+ OP_COLON)? var_w
private a_accept ::=
    W_AT OP_LPAREN nexpr OP_COMMA nexpr OP_RPAREN |
    W_VALIDATE OP_LPAREN a_validate (OP_COMMA a_validate)* OP_RPAREN |
    W_BEEP |
    W_ERASE W_ALL |
    W_SIZE OP_LPAREN nexpr OP_RPAREN
private a_validate ::=
    W_UALPHA | W_DIGIT | W_NUMERIC | sexpr
s_break ::=
    W_BREAK (lino (OP_COMMA lino)*)? |
    W_UNBREAK (lino (OP_COMMA lino)*)?
s_call ::=
    W_CALL subprog (OP_LPAREN (W_ALL | a_call) (OP_COMMA a_call)* OP_RPAREN)?
private a_call ::=
    OP_HASH? nexpr | sexpr
s_close ::=
    W_CLOSE OP_HASH nexpr (OP_COLON W_DELETE)?
s_data ::=
    W_DATA A_DATA? (OP_COMMA A_DATA?)*
s_def ::=
    W_DEF ((nvar_f OP_EQ nexpr) |  // arguments covered by *var_* rules, includes constant case
           (svar_f OP_EQ sexpr))
s_delete ::=
    W_DELETE sexpr
s_dim ::=
    W_DIM a_dim (OP_COMMA a_dim)*
private a_dim ::=
    var_w /* OP_LPAREN nvalue (OP_COMMA nvalue)* OP_RPAREN */  // parens handled by var rule
s_display ::=
    W_DISPLAY
    (a_display+ (OP_COLON a_using)? (OP_COLON a_print)? |
     a_using (OP_COLON a_print)? |
     a_print)?
private a_display ::=
    W_AT OP_LPAREN nexpr OP_COMMA nexpr OP_RPAREN |
    W_BEEP |
    W_ERASE W_ALL |
    W_SIZE OP_LPAREN nexpr OP_RPAREN
private a_using ::=
    W_USING (sexpr | lino)?
s_end ::=
    W_END
s_for ::=
    W_FOR nvar_w OP_EQ nexpr W_TO nexpr (W_STEP nexpr)?
s_go ::=
    (W_GOTO | W_GO W_TO | W_GOSUB | W_GO W_SUB) lino
s_if ::=
    // recursion causing issues for slist_recovery
    W_IF nexpr W_THEN a_then_else (W_ELSE a_then_else)?
a_then_else ::=
    lino | slist
s_image ::=
    W_IMAGE A_IMAGE?
s_input ::=
    W_INPUT
    ((sexpr OP_COLON)? var_w (OP_COMMA var_w)* |
      OP_HASH nvalue (W_REC nexpr)? OP_COLON var_w (OP_COMMA var_w)* OP_COMMA?)
s_let ::=
    W_LET?
    (nvar_w (OP_COMMA nvar_w)* (OP_EQ nexpr)? |
     svar_w (OP_COMMA svar_w)* (OP_EQ sexpr)?)
s_linput ::=
    W_LINPUT
    ((sexpr OP_COLON)? var_w |
     OP_HASH nvalue (W_REC nexpr)? OP_COLON var_w)
s_next ::=
    W_NEXT nvar_r
s_on_cond ::=
    W_ON W_BREAK (W_STOP | W_NEXT) |
    W_ON W_ERROR (W_STOP | lino) |
    W_ON W_WARNING (W_PRINT | W_STOP | W_NEXT)
s_on_go ::=
    W_ON nexpr (W_GOTO | W_GO W_TO | W_GOSUB | W_GO W_SUB) lino (OP_COMMA lino)*
s_open ::=
    W_OPEN OP_HASH nexpr OP_COLON sexpr (OP_COMMA a_open)*
private a_open ::=
    W_RELATIVE | W_SEQUENTIAL |
    W_DISPLAY | W_INTERNAL |
    W_INPUT | W_OUTPUT | W_APPEND | W_UPDATE |
    W_FIXED nexpr? | W_VARIABLE nexpr? |
    W_PERMANENT
s_option ::=
    W_OPTION W_BASE nvalue
s_print ::=
    W_PRINT
    (OP_HASH nexpr (OP_COMMA W_REC nexpr (OP_COMMA a_using))? OP_COLON |
     a_using OP_COLON)?
     a_print?
private a_print ::=
    (expr | OP_COMMA | OP_SEMI | OP_COLON)+
s_randomize ::=
    W_RANDOMIZE nexpr?
s_read ::=
    W_READ var_w (OP_COMMA var_w)*
s_rem ::=
    W_REM // A_REM (handled by generic comment)
s_restore ::=
    W_RESTORE (lino | OP_HASH nexpr (OP_COMMA W_REC nexpr))?
s_return ::=
    W_RETURN (W_NEXT | lino)?
s_run ::=
    W_RUN (sexpr | lino)?
s_stop ::=
    W_STOP
s_sub ::=
    W_SUB subprog (OP_LPAREN param (OP_COMMA param)* OP_RPAREN)?
s_subend ::=
    W_SUBEND |
    W_SUBEXIT
s_trace ::=
    W_TRACE |
    W_UNTRACE
bang_comment ::=
    W_BANG

// predefined functions
f_num ::=
    W_FUN_N OP_LPAREN expr (OP_COMMA expr)* OP_RPAREN
    {name="numerical function"}
f_str ::=
    W_FUN_S OP_LPAREN expr (OP_COMMA expr)* OP_RPAREN
    {name="string function"}
f_const ::=
    W_FUN_C
    {name="numerical constant"}

// line numbers
linedef ::= LNUMBER
    {mixin="net.endlos.xdt99.xbas99.psi.impl.Xbas99NamedElementImpl"
     implements="net.endlos.xdt99.xbas99.psi.Xbas99NamedElement"
     methods=[getName setName getNameIdentifier getPresentation]
     name="line number definition"}
lino ::= NUMBER
    {mixin="net.endlos.xdt99.xbas99.psi.impl.Xbas99NamedElementImpl"
     implements="net.endlos.xdt99.xbas99.psi.Xbas99NamedElement"
     methods=[getName setName getNameIdentifier getPresentation getReference]
     name="line number"}

// numerical expression (includes logical and relational expression)
private nexpr ::=  // entry point, only used once!
    (satom rop satom) |    // string comparison yields -1, 0, +1
    nexprn
nexprn ::=
    (W_NOT nexprn) |
    (OP_MINUS nexprn) |
    ((natom | ssimple) (nop nexprn)*)  // string comparison yields -1, 0, +1
    {name="numerical expression"}
private ssimple ::=
    OP_LPAREN satom rop satom OP_RPAREN  // sexpr in nexpr needs parens, except for top level
private natom ::=
    (OP_LPAREN nexprn OP_RPAREN) |
    f_num | f_const | nvar_r | nvalue
    {name="numerical term"}
private nop ::=
    OP_MUL | OP_DIV | OP_PLUS | OP_MINUS | OP_EXP |
    rop |
    W_AND | W_OR | W_XOR
    {name="numerical operator"}
nvar_w ::=
    // use optional parens for array access; use annotator to mark string args in array vars
    // parens also cover call of def'd functions; need string args for those
    IDENT (OP_LPAREN expr (OP_COMMA expr)* OP_RPAREN)?
    {mixin="net.endlos.xdt99.xbas99.psi.impl.Xbas99NamedElementImpl"
     implements="net.endlos.xdt99.xbas99.psi.Xbas99NamedElement"
     methods=[getName setName getNameIdentifier getPresentation getReference]
     name="numerical variable"}
nvar_r ::=  // includes def'd functions
    IDENT (OP_LPAREN expr (OP_COMMA expr)* OP_RPAREN)?
    {mixin="net.endlos.xdt99.xbas99.psi.impl.Xbas99NamedElementImpl"
     implements="net.endlos.xdt99.xbas99.psi.Xbas99NamedElement"
     methods=[getName setName getNameIdentifier getPresentation getReference]
     name="numerical variable"}
nvar_f ::=
    // function definition
    IDENT (OP_LPAREN var_w (OP_COMMA var_w)* OP_RPAREN)?
    {mixin="net.endlos.xdt99.xbas99.psi.impl.Xbas99NamedElementImpl"
     implements="net.endlos.xdt99.xbas99.psi.Xbas99NamedElement"
     methods=[getName setName getNameIdentifier getPresentation getReference]
     name="numerical function"}
private nvalue ::=
    NUMBER | FLOAT
    {name="numerical value"}

// string expression
sexpr ::=
    satom (sop sexpr)*
    {name="string expression"}
private satom ::=
    (OP_LPAREN sexpr OP_RPAREN) |
    f_str | svar_r | svalue
    {name="string term"}
private sop ::=
    OP_AMP
    {name="string operator"}
svar_w ::=
    // use optional parens for array access; use annotator to mark string args in array vars
    // parens also cover call of def'd functions; need string args for those
    SIDENT (OP_LPAREN expr (OP_COMMA expr)* OP_RPAREN)?
    {mixin="net.endlos.xdt99.xbas99.psi.impl.Xbas99NamedElementImpl"
     implements="net.endlos.xdt99.xbas99.psi.Xbas99NamedElement"
     methods=[getName setName getNameIdentifier getPresentation getReference]
     name="string variable"}
svar_r ::=
    // ident required for code completion of string variables (place cursor before $)
    (SIDENT | IDENT OP_STR) (OP_LPAREN expr (OP_COMMA expr)* OP_RPAREN)?
    {mixin="net.endlos.xdt99.xbas99.psi.impl.Xbas99NamedElementImpl"
     implements="net.endlos.xdt99.xbas99.psi.Xbas99NamedElement"
     methods=[getName setName getNameIdentifier getPresentation getReference]
     name="string variable"}
svar_f ::=
    // function definition
    SIDENT (OP_LPAREN var_w (OP_COMMA var_w)* OP_RPAREN)?
    {mixin="net.endlos.xdt99.xbas99.psi.impl.Xbas99NamedElementImpl"
     implements="net.endlos.xdt99.xbas99.psi.Xbas99NamedElement"
     methods=[getName setName getNameIdentifier getPresentation getReference]
     name="string function"}
private svalue ::=
    OP_QUOTE QSTRING? OP_QUOTE
    {name="string literal"}

// relational expression
//rexpr ::= ratom (rop rexpr)*  // covered by nexpr
private rop ::=
    OP_EQ | OP_LT OP_GT | OP_LT OP_EQ? | OP_GT OP_EQ?
    {name="relational operator"}

// type-generic expressions
private expr ::=
    nexpr | sexpr
private var_w ::=
    nvar_w | svar_w

// special identifier
param ::=
    (IDENT | SIDENT) (OP_LPAREN OP_COMMA* OP_RPAREN)?
    {name="function parameter"}
subprog ::=
    IDENT
    {name="subprogram name"}

// keep for syntax highlighter
dummy ::=
    COMMENT
